<html>
<head>
<META http-equiv=Content-Type content="text/html; charset=GBK">
<TITLE>MessageBox使用说明</TITLE>
<style type="text/css"> 
.p_text  { font-size: 12px;};
</style>
</head>
<body>
<p class="p_text">
MessageBox就是弹出一个提示框,或者是确认框,对话框等!<br>
JDK中有一个类javax.swing.JOptionPane,其实也是个对话框,但因为提示中的内容我们不能拷贝，所以我们搞了一个自己的MessageBox类!<br>

<br>
MessageBox中的关键方法有:<br>
MessageBox.show(String _message);  //弹出一个消息框,<span style="color:red">强烈建议如果是从某个界面中弹出来的,则不要使用这个,而使用下面的方法!否则会造成弹出窗口躲在后面！这是新员工非常容易犯的错误</span><br><br>
MessageBox.show(Container _parent, String _message);  //从某一个控件中弹出一个提示框,这是“模态式”窗口,即永远会卡在背后的控件前面,鼠标无法点击后面的控件！<br><br>
MessageBox.confirm(Container _parent, String _message);  //确认框,返回boolean类型值,直接提问一个问题,有两个按钮[是][否],如果是选择[是],则返回true<br><br>

MessageBox.showOptionDialog(Container _parentContainer, Object _msg, String _title, Object[] _options, int _initValue);  //选择框,不是简单的[是/否]选择,而是有更多种选择,且每个按钮名称不一样!<br><br>
其中:_options可以是String[]{"提交","作废","审核","取消"},_initValue表示光标默认是停留在哪个按钮上的!<br><br>

MessageBox.showException(Container _parent, Throwable _ex);  //显示一个异常,如果异常是一个业务异常,则只弹出显示异常名称,如果是系统异常,则输出异常堆栈！<br><br>

<span style="color:red">需要强烈提醒的是,MessageBox不仅可以直接弹出一个“字符串”的内容,还可以直接是一个javax.swing.JPanel面板对象,即经常有一种需求是弹出一个小的文本框,输入一段内容后,才继续处理!这也是一种消息弹出框!</span>
<br>
下面是一个MessageBox常用方法的一个完整例码!(可拷贝到Eclipse中直接运行)<br>
<textarea cols="150" rows="145" wrap="OFF" style="color:blue">
package com.pushdemo.ui;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import cn.com.infostrategy.ui.common.AbstractWorkPanel;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTPanel;

public class TestMsgBoxWKPanel extends AbstractWorkPanel implements ActionListener {

  private WLTButton btn_1, btn_2, btn_3, btn_4;
  private WLTButton btn_5, btn_6, btn_7;
  private JTextField text_1, text_2;

  @Override
  public void initialize() {
    btn_1 = new WLTButton("消息框"); //
    btn_2 = new WLTButton("确认框"); //
    btn_3 = new WLTButton("多选框"); //
    btn_4 = new WLTButton("显示异常消息框"); //

    btn_5 = new WLTButton("消息框(内容是面板)"); //
    btn_6 = new WLTButton("确认框(内容是面板)"); //
    btn_7 = new WLTButton("多选框(内容是面板)"); //

    btn_1.addActionListener(this); //
    btn_2.addActionListener(this); //
    btn_3.addActionListener(this); //
    btn_4.addActionListener(this); //
    btn_5.addActionListener(this); //
    btn_6.addActionListener(this); //
    btn_7.addActionListener(this); //

    this.setLayout(new FlowLayout(FlowLayout.LEFT)); //
    this.add(btn_1);
    this.add(btn_2);
    this.add(btn_3);
    this.add(btn_4);
    this.add(btn_5);
    this.add(btn_6);
    this.add(btn_7);
  }

  //点击按钮逻辑
  public void actionPerformed(ActionEvent _event) {
    if (_event.getSource() == btn_1) {
      onShowMsg_1(); //
    } else if (_event.getSource() == btn_2) {
      onShowMsg_2(); //
    } else if (_event.getSource() == btn_3) {
      onShowMsg_3(); //
    } else if (_event.getSource() == btn_4) {
      onShowMsg_4(); //
    } else if (_event.getSource() == btn_5) {
      onShowMsg_5(); //
    } else if (_event.getSource() == btn_6) {
      onShowMsg_6(); //
    } else if (_event.getSource() == btn_7) {
      onShowMsg_7(); //
    }
  }

  private void onShowMsg_1() {
    MessageBox.show(this, "测试的弹出消息框!!\r\n这种消息可以多行！"); //
  }

  private void onShowMsg_2() {
    boolean isConfirm = MessageBox.confirm(this, "你真的想删除该记录吗?"); //
    MessageBox.show(this, "确认框返回的结果是[" + isConfirm + "]"); //
  }

  private void onShowMsg_3() {
    int li_result = MessageBox.showOptionDialog(this, "请选择你下一步想做什么动作?", "提示", new String[] { "提 交", "[office_061.gif]废止", "[office_036.gif]审核", "取 消" }, 1); //【废止】与【审核】带图片!!
    MessageBox.show(this, "你选中的是第[" + li_result + "]个按钮动作!\r\n请注意:第一个按钮的顺序是0,而不是1"); //
  }

  private void onShowMsg_4() {
    try {
      UIUtil.getHashVoArrayByDS(null, "select * from test12345 where pkid=1"); //故意弄一条肯定会报错的SQL,然后弹出异常处理框!!
    } catch (Exception _ex) {
      MessageBox.showException(this, _ex); //
    }
  }

  private void onShowMsg_5() {
    MessageBox.show(this, getContentPanel(), 350, 150); //内容不仅是一个字符串,还可以直接是一个面板！！！然后后面还可以继续得到面板中的内容!!继续处理！
    MessageBox.show(this, "文本框内容是[" + text_1.getText() + "]"); //
  }

  private void onShowMsg_6() {
    boolean isConfirm = MessageBox.confirm(this, getContentPanel(), 350, 150); //
    MessageBox.show(this, "返回的结果[" + isConfirm + "],文本框内容是[" + text_1.getText() + "]"); //
  }

  private void onShowMsg_7() {
    int li_result = MessageBox.showOptionDialog(this, getContentPanel(), "提示", new String[] { "提 交", "[office_061.gif]废止", "[office_036.gif]审核", "取 消" }, 1, 350, 150);
    MessageBox.show(this, "返回的结果[" + li_result + "],文本框内容是[" + text_1.getText() + "]"); //
  }

  private JPanel getContentPanel() {
    JPanel myContentPanel = WLTPanel.createDefaultPanel(null); //布局类为空,即绝对位置布局！！

    //创建两个label与两个文本框
    JLabel label_1 = new JLabel("新流程编码", SwingConstants.RIGHT); //
    text_1 = new JTextField(); //
    JLabel label_2 = new JLabel("新流程名称", SwingConstants.RIGHT); //
    text_2 = new JTextField(); //

    //设置这4个控件的绝对位置!
    label_1.setBounds(5, 5, 95, 20); //
    text_1.setBounds(110, 5, 200, 20); //
    label_2.setBounds(5, 30, 95, 20); //
    text_2.setBounds(110, 30, 200, 20); //

    //加入4个控件
    myContentPanel.add(label_1); //
    myContentPanel.add(text_1); //
    myContentPanel.add(label_2); //
    myContentPanel.add(text_2); //

    return myContentPanel;
  }
  
}

</textarea>

<br><br>
MessageBox中弹出的内容是面板时,也可以使用BillDialog中的addConfirmButtonPanel()与addOptionButtonPanel()方法来实现,即它与MessageBox中的弹出内容是面板的功能是一样的！两者是等价的！<br>
下面是一个完整的代码例子!<br>
<textarea cols="150" rows="90" wrap="OFF" style="color:blue">
package com.pushdemo.ui;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import cn.com.infostrategy.ui.common.AbstractWorkPanel;
import cn.com.infostrategy.ui.common.BillDialog;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTPanel;

public class TestConfirmDialogWKPanel extends AbstractWorkPanel implements ActionListener {

  private WLTButton btn_1 = new WLTButton("确认/取消按钮窗口"); //
  private WLTButton btn_2 = new WLTButton("多选择按钮窗口"); //

  @Override
  public void initialize() {
    this.setLayout(new FlowLayout()); //

    btn_1.addActionListener(this); //
    btn_2.addActionListener(this); //

    this.add(btn_1); //
    this.add(btn_2); //
  }

  public void actionPerformed(ActionEvent _event) {
    //创建我的内容面板
    JPanel myContentPanel = WLTPanel.createDefaultPanel(null); //布局类为空,即绝对位置布局！！

    //创建两个label与两个文本框
    JLabel label_1 = new JLabel("新流程编码", SwingConstants.RIGHT); //
    JTextField text_1 = new JTextField(); //
    JLabel label_2 = new JLabel("新流程名称", SwingConstants.RIGHT); //
    JTextField text_2 = new JTextField(); //

    //设置这4个控件的绝对位置!
    label_1.setBounds(5, 5, 95, 20); //
    text_1.setBounds(110, 5, 200, 20); //
    label_2.setBounds(5, 30, 95, 20); //
    text_2.setBounds(110, 30, 200, 20); //

    //加入4个控件
    myContentPanel.add(label_1); //
    myContentPanel.add(text_1); //
    myContentPanel.add(label_2); //
    myContentPanel.add(text_2); //

    //创建窗口!!
    BillDialog dialog = new BillDialog(this, "请输入条件", 400, 150); //
    dialog.getContentPane().add(myContentPanel); //在面板内容中加上我的面板!!

    if (_event.getSource() == btn_1) { //如果点击的是第一个按钮
      dialog.addConfirmButtonPanel(); //非常关键,即添加【确认】【取消】按钮
      dialog.setVisible(true); //

      if (dialog.getCloseType() == BillDialog.CONFIRM) { //如果是点击确定返回的!
        String str_1 = text_1.getText(); //可以直接取得上面控件中的值,这是最方便的地方,即整个代码是“流线型”的,非常容易懂！！！
        String str_2 = text_2.getText(); //
        if (str_1.equals("")) {
          MessageBox.show(this, "请必须输入流程编码!"); //
          return;
        }

        //进行实际逻辑处理!!!
        System.out.println("第一个文本框内容[" + str_1 + "],第二个文本框内容[" + str_2 + "]"); //
      }
    } else if (_event.getSource() == btn_2) { //如果点击的是第二个按钮!
      dialog.addOptionButtonPanel(new String[] { "提 交", "审 核", "废 止", "取 消" }); //关键代码,在面板下方加上【确定】【取消】两个按钮!
      dialog.setVisible(true); //
      MessageBox.show(this, "返回结果是[" + dialog.getCloseType() + "],流程编码内容是[" + text_1.getText() + "]"); //
    }
  }

}

</textarea>
<br>
上面这段代码有几个关键地方：<br>
1.自己的内容面板最好是使用绝对位置布局,即layout为null,然后在控件中设置setBounds()<br>
2.内容面板创建方式使用WLTPanel.createDefaultPanel(null);这样是渐变效果<br>
3.必须调用dialogaddConfirmButtonPanel()方法加入【确定】【取消】按钮<br>

<br><br><br>
</p>
</body>
</html>
