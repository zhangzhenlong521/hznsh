<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>技术路线</title>
<style type="text/css"> 
.p_text  { font-size: 12px;};
.tabstyle {  border-collapse:   collapse; font-size: 12px; border:1px;};
.tdstyle    {  border:   solid   1px   #888888; font-size: 12px; };
</style>
</head>

<body>
<p>普信咨询 WebPush 平台技术路线 </p>
<table width="60%" border=1>
<tr><td style="font-size: 12px;">
&nbsp;&nbsp;<span style="color:FF0000">普信公司经过多年的实践与反复比较，认为服务器端与客户端都使用Java技术来实现，然后又像B/S架构发布一样按需下载其对应的页面代码(加密过的Class类),
即将C/S界面的操控性强,体验丰富的优点与B/S架构的易部署,界面美观的优点完美结合起来 那这种技术路线性价比应该是最高的。。。</span> <br><br>
1。首先它仍然是一个三层结构的 Web 应用，即仍然同时可以使用 Html 技术实现 Web 应用，换句话说就是说服务器端仍是一个 war 包，可以部署在 Tomcat,WebSphere 等 web 服务器中的，并不是说服务器端是一个自己写的应用程序。 <br><br>
2。客户端使用 Java 桌面技术 (Swing) 实现，可以更快更稳定的实现 Web 较难实现的功能与效果，比如复杂的 UI 端控制与交互等，充分运用 Java 语言的强大功能在客户端计算，实现真正意义上的分布式计算模式，至少可以说 Java 比 JavaScript 计算能力健壮得多还是没有多少人反对的！ <br><br>
3。客户端与服务器都是 Java 语言，在传输参数时也更方便，可以直接提交任意自定义 Java 序列化对象，而不像 Web1.0 一样，只能传输 Form 表单等极其简陋的数据结构(太弱了)，或者像 Web2.0 一样传输 XML格式后再转换成 Java对象，性能与开发效率又都不够高。 <br><br>
4。像 B/S 结构一样，按需下载所点击的页面，最新版本自动动态分发，是真正意义的 B/S 发布模式，只不过传统的 B/S 是下载的 Html 文件，而这里则是 Class 文件，即方式与原理一样，只是文件格式不同而已。浏览器拿到 Html 代码后渲染出页面，而 JRE 是拿到 Class 文件渲染出页面。 Java 有一种 ClassLoader 技术可以通过重构之方便的实现这个，而 VB,Delphi,VC 则没有这种设计。 <br><br>
5。放弃在浏览器嵌入 Activex 的方法（很不稳定），直接使用客户端应用程序，像 C/S 程序一样稳定，浏览器登录时其实也是直接转调本地应用程序的。 <br><br>
6。使用 Rar 自解压纯绿色安装客户端 , 让第一次安装 JRE 非常方便与简洁（只需耗时 20 秒左右） <br><br>
7。现在硬件配置越来越高，发展也非常快，以前客户端跑 Java 程序很慢的问题也渐渐不存在了。 <br><br>
8。当然开发效率也是很高的，因为像面向对象的 Java 语言比起 JavsScript 开发起来更易抽象更易封装得多！
</td></tr>
</table>

<br><br>
<span style="font-size: 12px;"">也许有人认为我们的技术路线与 Applet 一样，严格的讲，我们的确是从 Applet 的理念中汲取了大量优点，但同时也针对其缺点进行了根本性的修改，已不能称之为 Applet 了。<br>
为了更好的说明，我列出了一个表格，专门针对 Applet 的一些缺点列出我们是如何解决的。</span><br>
<table width="60%"  class="tabstyle" cellspacing=0 cellpadding=5>
  <tr bgcolor="#DCFAC8">
    <td class="tdstyle"><p align="center"><strong>&nbsp; </strong></td>
    <td class="tdstyle"><p align="center"><strong>Applet </strong><strong>的缺点 </strong><strong></strong></td>
    <td class="tdstyle"><p align="center"><strong>我们的修改办法 </strong><strong></strong></td>
  </tr>
  <tr>
    <td class="tdstyle">1 </td>
    <td class="tdstyle">只能在浏览器中使用 &lt;Applet&gt; 或 &lt;Object&gt; 标记方式访问。 
        这种方法都依赖于在注册表中注册一个 ActiveX 控件 , 该控件其实就是本地的 Java Plug-in ，但每安装高版本的 Java Plug-in 时就会自动覆盖旧的注册信息，会导致不同版本的 Plug-in 互相冲突，更有甚者会有多家公司都采用applet 技术，但版本又不一样，导致版本之间混乱冲突更厉害。结果经常发生访问不了等各种问题，给维护带来巨大成本。 
        这一点就让许多公司后怕从而放弃了该技术，也是 apllet 技术没有成功的主要原因之一。 </td>
    <td class="tdstyle">我们不是在浏览器中嵌入 ActiveX ，而是直接调用本地应用程序，而且不是使用客户预装的某个版本的 JRE ，而是重新安装一个经过我们严格测试的固定版本的 JRE(1.6_14) 
        &nbsp; 
        这样既不会被浏览器干扰，也不会被其他版本的 JRE 干扰，即永远不会互相影响！ </td>
  </tr>
  <tr>
    <td class="tdstyle">2 </td>
    <td class="tdstyle">不是真正的按需下载所需的 UI 类，而是下载整个 Jar 文件，而且不能从 WEB-INF/lib 下载，只能从 WebRoot 目录下下载 
        即点击某个功能点时不是下载其真正的类，而是将其所在的 Jar 文件都下载下来，就是不管有用没用的都下载下来，所以有时性能极低（性能低得令人难以容忍也是 applet 不能成功的主要原因之一）!!<br>
        但如果将 jar 做碎一点，比如一个功能点的代码打成一个 jar 包，则需要开发人员在发布时耗尽大量精力，而且有些类互相引用，几乎不可能保证不会发生漏掉一个需要引用的类的情况，除非所有功能点全部回归测试,这是不可能的任务。<br>
        即如何打包并发布jar这个致命的麻烦，导致Applet只能做点小游戏之类的，而搞不了大项目,因为要么Jar太大性能太慢，要么打Jar包时非常费劲，完全靠人工精心管理！<br> 
        另外jar只能放在WebRoot子目录下，而不能放在 ClassPath 下，也给部署带来巨大的负担,即在Eclipse等开发环境中是在ClsPath中,但发布时需要打Jar包拷贝到%WebRoot%/某个目录下，很麻烦!<br>
        总之,这些原因导致Applet技术无法商用,尤其是做大系统！
        </td>
    <td class="tdstyle">
      我们重构了AppletClassLoader，实现真正意义上的与 B/S 结构一样的“按需下载”的发布模式，而且可以从 ClassPath 路径里下载，这样既解决了性能问题，也解决了部署的麻烦!<br>
      即开发人员什么都不要管,直接在开发环境中写代码，运行时,平台加载引擎会自动根据相互引用的关系，“智能”的去下载真正需要的类！部署时也无需拷贝到%WebRoot%\目录下
    </td>
  </tr>
  <tr>
    <td class="tdstyle">3 </td>
    <td class="tdstyle">Applet 只解决了从服务器端下载UI的问题，没有提供下载 UI 页面后如何与服务器端进行业务逻辑通讯的分布式应用解决方案。 <br>
        即UI类下载到了客户端,如何与服务器端通信?比如提交一个表单数据,查询一个数据?一般人都不知道Http可以直接提交与传输Java序列化对象!即使知道,也无法构造一个像EJB一样的分布式构架,即客户端只有接口桩,调用客户端桩接口时,自动会调用到服务器端的实现类！！<br>
        为此,有人使用Ejb, 有人使用 Rmi，但这些东西都不是基于Http协议的，客户的网络安全防火墙阻止所有非http协议的请求，而且只会开放一个网络端口（不承认开放两个端口的要求）！所这这只能使用Http协议，依然使用原来的Web端口自己去实现一个分布式开发架构,否则开发非常麻烦。但这有一定技术难度,许多公司没有实现这个功能。 
        这也是许多公司从来不会考虑我们这种技术路线的原因之一。</td>
    <td class="tdstyle">我们自已实现了一套基于 http 协议的分布式应用开发的 API ，即仍然是走 Http 协议，也仍然是走原来的端口，但又是分布式应用，即客户端是接口桩，真正的实现在服务器端。即像EJB/RMI一样,开发非常简单。 </td>
  </tr>
  <tr>
    <td class="tdstyle">4 </td>
    <td class="tdstyle">客户端用于许多第三方的包，比如 Log4j， JfreeChart 等，Applet只能像下载业务代码一样一个个下载下来，使得性能更低，尤其是第一次访问时低得不能忍受！！即本来就慢,又要下载一大堆第三方Jar？不是更糟糕？</td>
    <td class="tdstyle">我们预先将这些第三方 Jar 包打进我们自己的 JRE 安装程序中，同时在重构的 AppletClassLoader 中过滤掉这些包，指明这些包不需要从服务器下载，而是直接从本地加载 </td>
  </tr>
  <tr>
    <td class="tdstyle">5 </td>
    <td class="tdstyle">客户端代码缓存的处理。Applet 加载后，会存在浏览器的缓存中(因为所有Activex必须置于浏览器管理之下！否则有安全漏洞)，下次访问时会比较浏览器缓存中的版本从而决定是否下载最新的 jar 文件。 <br>
        但因为客户经常会经常清空浏览器的缓存(这是非常正常与频繁的事情)，或者有的客户将浏览器的缓存设成只存放几天(默认是 20 天)，所以过几天就可能重新下载一回，这样性能就更低了。即本来就慢,要下载一大堆第三方Jar,现在竟然还说可能经常被清空，而要重新下载？岂不是雪上加霜？谁能受得了这种没完没了的性能缺陷？<br>
        最要命的是这个缺陷还无法解决,因为只要是在浏览器中加载，就必须接受浏览器的“游戏规则”，而清空浏览器缓存是浏览器必须的功能，你无法突破这个！！
    </td>
    <td class="tdstyle">我们彻底摆脱浏览器控制，在操作系统的安全机制控制下，创建自己的缓存目录，自己实现 UI 类的缓存，下次下载时会比较实际点击的类的版本有无更新决定是否重新下载。而不是直接下载一个 jar 文件。 这样性能更高。另外 Class 文件是加密的，也更安全。<br>
    即我们都是一切都是自己控件的,从第三方的Jar到缓存, 都是自己的智能控制，所以只会下载一次，按需下载，从而将性能提高到可以接受的范围之下！
    </td>
  </tr>
  <tr>
    <td class="tdstyle">6 </td>
    <td class="tdstyle">Applet 使用默认的 Swing 风格做出来的界面不好看 , 界面丑陋也是 Applet 与 Java 桌面风格受抨击的一大弱点 </td>
    <td class="tdstyle">我们重构了所有的 UI, 模仿 Html 界面风格，使用界面效果大为提高，已让人看不出是 Swing 界面了，以为是 Html 界面呢。 </td>
  </tr>
   <tr>
    <td class="tdstyle">7 </td>
    <td class="tdstyle">Java Swing技术运行速度慢,因为是字节码要编译成机器码</td>
    <td class="tdstyle">10年前这也许算个问题，现在的硬件配置早已让这相问题不存在了，即现在最便宜的PC机跑Java应用程序都很流畅！</td>
  </tr>
  <tr>
    <td class="tdstyle" colspan=3>
    总之，我们认为只有彻底完美的解决上了述诸多问题，我们的技术路线才可行！！而这些问题每个都不是那么好搞的,也不是任何公司都愿意投入精力去解决的(许多人从一开始就不相信这种路线可行的),或者是想解决就能真的搞定的！<br><br>
    而如果充分解决了上述各种问题后，那除了需要在客户端一次性的安装一个17M的客户端这个唯一的缺点外，其他各方面都是很科学的。而安装后的客户端是非常稳定的（因为是一个固定 JRE 版本的应用程序），不会带来担心的维护问题。反而倒是随着浏览器的升级越来越快，新旧版本的 IE 对 JavsScript 兼容性不好的问题越来越多，更别提不同浏览器之间的兼容性了，现在连网易的首页使用FireFox访问都有些问题，各种浏览器之间的兼容性混战一团，使得我们这种系统开发商的维护性成本非常巨大。 <br><br>
    咱们还有一个小缺点是,第一次访问时下载Class文件可能要稍微慢一点，在200K/秒的互联网速度下，需要12秒左右，这的确有点慢，但令人欣慰的是,国家在加快网络高速公路的硬件建设，并且在2016年以内,网速能提高5倍左右,即峰值时间下载速度都能达到1M/秒左右!!到那时，该问题也不存在了!从某种意义上说，咱们真是"适逢其时"！<br>
    虽然第一次有点慢，但只要服务器不重新部署(上线后,这种概率并不高)，从第二次以后的每一次访问，我们的速度都比传统的Web技术快,即以20%的概率速度慢换取80%概率的速度快,是划算的！只不过我们平时在给客户演示时,每次都是启动服务器，如果不把后台一个参数(VERSIONUMBER)设下,则每次都会重新下载Class文件,结果让许多人误以为系统性能较低！这是其实是个错觉,因为他忘记了每次都是重启的这个事实！<br>
    比如：比如不出现提示框关闭窗口在 IE6 与 IE7 之间就不兼容，在 IE6 中只需要执行 : <br>
    window.opener=null; <br>
    window.close(); <br>
但在 IE7 中则还需再加一行莫名其妙的代码才行： <br>
window.opener=null; <br>
window.open('','_self'); // 在 IE7 中不加该行代码仍然会出现提示框 , 根本不能兼容 IE6 的代码 <br>
windows.close(); <br>
像这种最常用的功能都会不兼容，更别说大量复杂的高级 JS 功能了 ! <br>
所以有一天为了保证系统的最稳定，维护量最少，我们一定会希望所有客户端最好都统一准备一个固定版本的 IE( 比如 IE6.0.2800.2180), 但问题是 IE 不能 ” 纯绿色安装 ” ，即装了 IE7 后必然会覆盖 IE6 ，更不可能在同一机器上安装两个小版本号不一样的 IE6 ，而且 IE 安装程序非常大，不是像我们的客户端只有 19M 而是数百兆！ <br>
&nbsp;<br>
</td>
</tr>
</table>

<br>
<p style="font-size:12px">
★平台十大特点:<br>
1.结合C/S与B/S的优点,使用智能客户端技术,既充分运用了客户端计算能力,使分布式应用更为健壮,又保证了发布模式与B/S一样简便!<br><br>

2.智能客户端可以在客户端构造健壮与复杂的页面缓存与数据缓存,从而极大提高性能<br><br>

3.采用MVC设计模式,页面与数据完全分离(MVC),只传输"纯业务数据"而不重复传输"页面格式数据",使系统性能与代码可维护性都很高<br><br>

4.客户端与服务器端传输的是纯Java序列化对象,并且经过压缩与加密,所以开发效率更高效,安全性也更高<br><br>

5.客户端UI部分采用Java桌面技术绘制,所以界面的客户交互体验性比传统Html界面更好(尤其在编辑状态时),比如:表间操作,局部刷新不闪屏,容器类表格轻松做到局部滚屏,窗口变大变小页面不会变形,锁定表格列,右键操作,UI端排序,分页,隐藏列,快速定位,拖拉操作,彩色字体校验等<br><br>

6.强大的单据模板配置,使得界面开发只需要直接配置即可,而不需要写代码,大大提高开发效率,表单中各控件可以自由设置：是否显示,大小,是否可编辑,加载公式,编辑公式,颜色公式,逻辑定义等<br><br>

7.强大的工作流引擎,使得复杂的流程处理变得很轻松,工作流可实现：跨部门会办,子流程,动态角色过滤,自由/限制两种接收模式,抄送,撤回,退回,半路启动/结束,发邮件/短信等功能<br><br>

8.Excel表格模板可以实现几乎与Excel一致的强大功能,使得定置报表变得很便捷,比如：表格行/列合并,背景颜色,字体,上下/左右居排列,行高列宽自由设置等,编辑公式实现数据之间的联动<br><br>

9.报表模板可以实现轻松实现柱形图,饼形图,曲线图等报表配置,而多维报表可以实现：挖掘,钻取,投影,穿透,过滤,快照,占比,速动,提析,等功能,从而快速得到各种管理报表<br><br>

10.强大的系统监控日志功能,可以随时监控系统资源使用情况,包括：在线人数,功能点访问情况,每次请求耗时,性能瓶颈点,SQL性能监控,JVM内存变化,CPU使用情况,数据修改日志等,而且保证系统发生故障时快速定位问题所在,即系统维护性非常好<br><br>

<br><br>
★如果要3句话讲清平台特点:<br><br>
1.采用主流J2EE三层架构技术路线,支持多操作系统(Windows/Unix/Linux),多中间件(WebSphere/WebLogic/JBOss/Tomcat),多数据库(Oracle/SQLServer/DB2/Mysql),健壮,灵活,可靠!<br><br>

2.集合了C/S与B/S的优点,功能上具有大量C/S的特点,部署灵活性又与B/S一样<br><br>

3.具体来说,有:仿Visio在线流程图编辑,仿Excel报表控件,柱曲饼图表展示,单据模板配置,Bom图设计,工作流引擎监控等特色功能(当场展示这6大功能).<br><br>
</p>
<br><br>
</body>
</html>
