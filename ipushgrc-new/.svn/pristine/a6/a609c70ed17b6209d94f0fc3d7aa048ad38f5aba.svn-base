package com.pushworld.ipushgrc.bs.login.p010;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import cn.com.infostrategy.bs.common.CommDMO;
import cn.com.infostrategy.to.common.HashVO;
import cn.com.infostrategy.to.common.TBUtil;
import cn.com.infostrategy.to.common.WLTRemoteException;

/**
 * 分析处理登录数据
 * @author YangQing/2013-12-02
 */
public class AnalyseLoginData {
	TBUtil tbutil = new TBUtil();
	CommDMO commdmo = new CommDMO();

	/**
	 * 分析人员登录信息
	 * @param date
	 * @throws WLTRemoteException
	 * @throws Exception
	 */
	private void analyseUserLogin(List<String> date) throws WLTRemoteException, Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String monday = date.get(0);//拿出星期一，来计算本周是一年中的第几周
		String saturday = date.get(date.size() - 2);
		String str_weekofyear = getWeekOfYear(monday, saturday);//得到“XX年第X周”,查询日期所在周

		String sql_DataisExist = "select count(*) from userlogin where weekofyear='" + str_weekofyear + "'";
		int dataCount = Integer.parseInt(commdmo.getStringValueByDS(null, sql_DataisExist));//查出是这周数据是否存在
		String today = tbutil.getCurrDate();
		List<String> list_date = getDayofWeek(today);
		String currWeek = getWeekOfYear(list_date.get(0), list_date.get(list_date.size() - 2));//当前日期所在周

		if (dataCount > 1 && currWeek.equals(str_weekofyear)) {
			//存在记录，且，是今天所在本周的记录,需要删除本周数据，再执行下面的插入(原因是如果本周调整了机构人员分配，原来的数据就有错了，再更新数据就不对了，所以要先删再重新弄).
			String sql_delete = "delete from userlogin where weekofyear='" + str_weekofyear + "'";
			commdmo.executeUpdateByDS(null, sql_delete);
		} else if (dataCount > 1 && !currWeek.equals(str_weekofyear)) {//存在记录，但不是今天所在本周的记录,不需要处理
			return;
		}

		String str_date = tbutil.getInCondition(date);
		String sql_logindata = "select id,dealtype,dealuserid,dealcorpid,dealcorpname,dealtime from pub_sysdeallog where substr(dealtime,1,10) in (" + str_date + ") order by dealtime asc";
		String sql_userdata = "select id,name from pub_user where code!='admin'";
		HashVO[] loginDataVO = commdmo.getHashVoArrayByDS(null, sql_logindata);//日期所在本周的数据
		HashVO[] userDataVO = commdmo.getHashVoArrayByDS(null, sql_userdata);//所有登录人员

		List<String> userloginData = new ArrayList<String>();//存储登录人员统计结果SQL
		for (int a = 0; a < userDataVO.length; a++) {
			String userid = userDataVO[a].getStringValue("id", "");//人员ID
			String username = userDataVO[a].getStringValue("name", "");//人员名称
			String userdeptid = "-99999";//人员所属部门ID
			String userdeptname = "";//人员部门名称
			HashMap<String, String> map_weekloginCount = new HashMap<String, String>();//用其size()表示本周登录次数
			long onlineHours = 0;//人员在线时长
			StringBuffer start_end_time = new StringBuffer("");
			String str_dayofweek = "";
			String str_ownerday = "";//本人的登录日期
			for (int x = 0; x < date.size(); x++) {//日期
				String currdate = date.get(x);
				str_dayofweek += currdate + ";";//本周的七天日期
				String str_startTime = "";//登录时间
				for (int y = 0; y < loginDataVO.length; y++) {//该日期下的登录系统记录
					String dealtype = loginDataVO[y].getStringValue("dealtype", "").trim();//记录类型
					String dealtime = loginDataVO[y].getStringValue("dealtime", "");//记录时间
					String dealuserid = loginDataVO[y].getStringValue("dealuserid", "");//人员ID
					if (dealuserid.equals(userid) && dealtime.indexOf(currdate) >= 0) {//找到此人该日期的数据
						map_weekloginCount.put(currdate, currdate);//有数据说明登录了，记一天
						userdeptid = loginDataVO[y].getStringValue("dealcorpid", "-99999");//人员部门ID
						userdeptname = loginDataVO[y].getStringValue("dealcorpname", "");//人员部门名称
						//处理在线时长的计算
						if (dealtype.equals("登录系统")) {
							if (str_startTime.equals("")) {
								str_startTime = dealtime;

								boolean isLastData = false;//是否是此人本天最后一条数据
								for (int z = y + 1; z < loginDataVO.length; z++) {
									String dealtime2 = loginDataVO[z].getStringValue("dealtime", "");//记录时间
									String dealuserid2 = loginDataVO[z].getStringValue("dealuserid", "");//人员ID
									if (dealuserid2.equals(userid) && dealtime2.indexOf(currdate) >= 0) {//还有此人该日期的数据
										isLastData = false;
										break;
									} else {
										isLastData = true;
									}
								}

								if (isLastData) {//说明本天最后没有退出时间记录，增加无操作强制退出后，理论上不会出现,可能是系统正在使用,不计算
									String currtime = tbutil.getCurrTime();
									if (currtime.contains(currdate)) {//是今天的日期，说明就是正在登录使用中,用现在时刻相减得出
										Date startDate = sdf.parse(str_startTime);
										Date endDate = sdf.parse(currtime);
										onlineHours += endDate.getTime() - startDate.getTime();//得出的是毫秒数
										start_end_time.append("登录:" + str_startTime + " 退出:" + currtime + ";");
									}
								}
								continue;
							}
						} else {//类型为“退出系统”
							if (str_startTime.equals("")) {//没有记录开始时间，说明可能是数据记录有误，理论上不会出现
								continue;
							} else {//相减得出时间差
								Date startDate = sdf.parse(str_startTime);
								Date endDate = sdf.parse(dealtime);
								onlineHours += endDate.getTime() - startDate.getTime();//得出的是毫秒数
								start_end_time.append("登录:" + str_startTime + " 退出:" + dealtime + ";");
								str_startTime = "";//清空登录时间
							}
						}
					}
				}
			}
			int weekloginCount = map_weekloginCount.size();//本周登录次数
			String str_online = "";//在线时长,X时X分X秒格式
			//计算时长 
			long hour = onlineHours / (60 * 60 * 1000);//时
			long minute = (onlineHours - (hour * 60 * 60 * 1000)) / (60 * 1000);//分
			long second = (onlineHours - (hour * 60 * 60 * 1000) - (minute * 60 * 1000)) / 1000;//秒
			if (hour > 0) {
				str_online = hour + "小时";
			}
			if (minute > 0) {
				str_online += minute + "分";
			}
			str_online += second + "秒";
			String count_ok = weekloginCount >= 5 ? "合格" : "不合格";//人员登录次数是否合格
			String online_ok = hour >= 20 ? "合格" : "不合格";//人员在线时长是否合格
			String str_start_end = start_end_time.toString();

			Iterator<String> itor = map_weekloginCount.keySet().iterator();
			while (itor.hasNext()) {
				String day = itor.next();
				str_ownerday += day + ";";
			}

			StringBuffer sql_loginData = new StringBuffer("");

			String id = commdmo.getSequenceNextValByDS(null, "S_USERLOGIN");
			sql_loginData.append(" insert into userlogin ");
			sql_loginData.append(" (ID,USERID,USERNAME,TIMEDETAIL,LOGINCOUNT,NUM_JUDGE,ONLINEHOURS,ONLINE_JUDGE,ONLINE_MILLISECOND,WEEKOFYEAR,DEPARTID,DEPARTNAME,DAYOFWEEK) ");
			sql_loginData.append(" values( ");
			sql_loginData.append(id + ",");
			sql_loginData.append(userid + ",'");
			sql_loginData.append(username + "','");
			sql_loginData.append(str_start_end + "',");
			sql_loginData.append(weekloginCount + ",'");
			sql_loginData.append(count_ok + "','");
			sql_loginData.append(str_online + "','");
			sql_loginData.append(online_ok + "',");
			sql_loginData.append(onlineHours + ",'");
			sql_loginData.append(str_weekofyear + "',");
			sql_loginData.append(userdeptid + ",'");
			sql_loginData.append(userdeptname + "','");
			sql_loginData.append(str_ownerday + "') ");

			userloginData.add(sql_loginData.toString());
		}
		commdmo.executeBatchByDS(null, userloginData);//执行数据的更新或增入
	}

	/**
	 * 分析部门登录情况
	 * @throws Exception 
	 * @throws WLTRemoteException 
	 */
	public void analyseDeptData(String str_date) throws WLTRemoteException, Exception {
		List<String> list_date = getDayofWeek(str_date);
		String str_weekofYear = getWeekOfYear(list_date.get(0), list_date.get(list_date.size() - 2));//得到“X年第X周”
		String str_dayofweek = "";//一周的7天
		for (int a = 0; a < list_date.size(); a++) {
			str_dayofweek += list_date.get(a) + ";";
		}

		String sql_DataisExist = "select count(*) from pub_deptloginData where weekofyear='" + str_weekofYear + "'";
		int dataCount = Integer.parseInt(commdmo.getStringValueByDS(null, sql_DataisExist));//查出是这周数据是否存在
		String today = tbutil.getCurrDate();//系统今天日期
		List<String> list_currdate = getDayofWeek(today);
		String currWeek = getWeekOfYear(list_currdate.get(0), list_currdate.get(list_currdate.size() - 2));//当前日期所在周

		if (dataCount > 1 && currWeek.equals(str_weekofYear)) {//存在记录，且，是今天所在本周的记录,需要更新数据.
			String sql_delete = "delete from pub_deptloginData where weekofyear='" + str_weekofYear + "'";
			commdmo.executeUpdateByDS(null, sql_delete);
		} else if (dataCount > 1 && !currWeek.equals(str_weekofYear)) {//存在记录，但不是今天所在本周的记录,不需要处理,直接查询数据库返回
			return;
		}

		//先分析人员登录统计数据
		analyseUserLogin(list_date);

		List<String> deptloginData = new ArrayList<String>();
		String sql_userlogin = "select id,userid,username,timedetail,logincount,onlinehours,online_millisecond,weekofyear,departid,departname,dayofweek from userlogin where weekofyear='" + str_weekofYear + "'";
		StringBuffer sql_userdept = new StringBuffer("");
		sql_userdept.append("select t1.userid,t1.userdept,t2.name deptname,t2.parentid,t2.corptype ");
		sql_userdept.append(" from pub_user_post t1 ");
		sql_userdept.append(" left join pub_corp_dept t2 ");
		sql_userdept.append(" on t1.userdept=t2.id ");
		sql_userdept.append(" where t2.id is not null ");
		String sql_dept = "select id,parentid,corptype from pub_corp_dept";

		HashVO[] userloginVO = commdmo.getHashVoArrayByDS(null, sql_userlogin);//得到本周人员登录统计数据
		HashVO[] userdeptVO = commdmo.getHashVoArrayByDS(null, sql_userdept.toString());//得到人员部门关系
		HashVO[] deptVO = commdmo.getHashVoArrayByDS(null, sql_dept);
		HashMap<String, String> deptmap = new HashMap<String, String>();//需要计算的部门

		for (int x = 0; x < userdeptVO.length; x++) {
			String deptid = userdeptVO[x].getStringValue("userdept", "");//部门ID
			String corptype = userdeptVO[x].getStringValue("corptype", "");//部门类型
			String higherdeptid = userdeptVO[x].getStringValue("parentid", "");//机构的父ID;

			if (corptype.equals("支行部门")) {//如果是支行的下级机构，则加入到支行里
				for (int y = 0; y < deptVO.length; y++) {
					String deptid2 = deptVO[y].getStringValue("id", "");//部门ID
					String corptype2 = deptVO[y].getStringValue("corptype", "");//部门类型
					String higherdeptid2 = deptVO[y].getStringValue("parentid", "");//机构的父ID;

					if (higherdeptid.equals(deptid2) && corptype2.equals("支行")) {
						if (deptmap.containsKey(deptid2)) {//如果MAP里有该支行的记录，则得到再拼接下属部门
							String depts = deptmap.get(deptid2);
							depts += deptid + ";";//拼接该支行下属部门
							deptmap.put(deptid2, depts);
						} else {
							deptmap.put(deptid2, deptid + ";");
						}
						break;
					} else if (higherdeptid.equals(deptid2) && !corptype2.equals("支行")) {//还没找到支行节点，继续往上找
						higherdeptid = higherdeptid2;
						y = -1;//从头开始找
						continue;
					}
				}
			} else {
				deptmap.put(deptid, deptid + ";");
			}
		}
		Iterator itor = deptmap.entrySet().iterator();
		HashVO[] deptLoginVO = new HashVO[deptmap.size()];//部门登录统计VO
		int voCount = 0;
		while (itor.hasNext()) {//遍历每一个要计算的部门
			Map.Entry<String, String> key_value = (Map.Entry<String, String>) itor.next();
			String deptid = key_value.getKey();//显示机构ID
			String lowerdeptids = key_value.getValue();//所含下属机构
			if (TBUtil.isEmpty(deptid) && deptid.equals("-99999")) {
				continue;
			}
			HashMap<String, String> daymap = new HashMap<String, String>();//用map的size()表示该部门的登录次数
			int userofdeptCount = 0;//该部门下的登录人员个数
			long deptOnlineHours = 0;//该部门的总在线时长
			List<String> deptlist = new ArrayList<String>();
			if (lowerdeptids.contains(";")) {//说明是支行
				String[] split_deptid = lowerdeptids.split(";");
				for (int a = 0; a < split_deptid.length; a++) {
					if (TBUtil.isEmpty(split_deptid[a])) {
						continue;
					}
					deptlist.add(split_deptid[a]);
				}
			} else {
				deptlist.add(deptid);
			}
			for (int a = 0; a < userloginVO.length; a++) {
				String departid = userloginVO[a].getStringValue("departid", "");//人员所属部门ID
				if (deptlist.contains(departid)) {//找到list中dept
					userofdeptCount++;//人数加1
					String dayofweek = userloginVO[a].getStringValue("dayofweek", "");//本周的登录日期
					String millisecond = userloginVO[a].getStringValue("online_millisecond", "");//此人的登录时长毫秒数
					deptOnlineHours += Long.parseLong(millisecond);//累加时长

					String[] everyDay = dayofweek.split(";");
					for (int b = 0; b < everyDay.length; b++) {
						if (TBUtil.isEmpty(everyDay[b])) {
							continue;
						}
						daymap.put(everyDay[b], "");//加入map,只要有一人在该天登录，则部门登录次数记1，不同人员同天登录不重复计数
					}
				}
			}

			//计算部门的平均在线时长
			BigDecimal avg_onlineHours = new BigDecimal("0");
			if (userofdeptCount != 0) {
				BigDecimal operand1 = new BigDecimal(deptOnlineHours + "");
				BigDecimal operand2 = new BigDecimal(userofdeptCount + "");
				avg_onlineHours = operand1.divide(operand2, RoundingMode.HALF_UP);//算出平均毫秒数，四舍五入
			}
			String[] onlineData = getOnlineData(Long.parseLong(avg_onlineHours.toString()));
			String str_online = onlineData[0];//X小时X分X秒
			String online_ok = onlineData[1];//评判合格
			String logincount_ok = daymap.size() >= 5 ? "合格" : "不合格";//部门登录次数是否合格

			BigDecimal param = new BigDecimal((1000 * 60 * 60) + "");
			BigDecimal online_second = avg_onlineHours.divide(param, 1, RoundingMode.HALF_UP);//算出在线小时数

			String deptname = commdmo.getTreePathColValue("pub_corp_dept", "name", "id", "parentid", "id", deptid);
			deptname = deptname.replace("->", "-");//替换连接符
			deptname = deptname.substring(deptname.indexOf("-") + 1);

			StringBuffer sql_deptLoginData = new StringBuffer("");
			String id = commdmo.getSequenceNextValByDS(null, "S_PUB_DEPTLOGINDATA");
			sql_deptLoginData.append(" insert into pub_deptloginData ");
			sql_deptLoginData.append(" (ID,LOGINCOUNT,NUM_JUDGE,ONLINE_HOUR,ONLINEHOURS,ONLINE_JUDGE,ONLINE_MILLISECOND,WEEKOFYEAR,DEPARTID,DEPARTNAME,DAYOFWEEK,LOWERDEPTIDS) ");
			sql_deptLoginData.append(" values( ");
			sql_deptLoginData.append(id + ",");
			sql_deptLoginData.append(daymap.size() + ",'");
			sql_deptLoginData.append(logincount_ok + "','");
			sql_deptLoginData.append(online_second.toString() + "','");
			sql_deptLoginData.append(str_online + "','");
			sql_deptLoginData.append(online_ok + "',");
			sql_deptLoginData.append(avg_onlineHours.intValue() + ",'");
			sql_deptLoginData.append(str_weekofYear + "',");
			sql_deptLoginData.append(deptid + ",'");
			sql_deptLoginData.append(deptname + "','");
			sql_deptLoginData.append(str_dayofweek + "','");
			sql_deptLoginData.append(lowerdeptids + "')");

			voCount++;
			deptloginData.add(sql_deptLoginData.toString());
		}
		commdmo.executeBatchByDS(null, deptloginData);//执行数据的更新或增入
	}

	/*
	 * 得到一个日期所在一周的七天
	 */
	public List<String> getDayofWeek(String str_date) throws ParseException {
		List<String> list_date = new ArrayList<String>();//存储本周7天日期
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		cal.setTime(sdf.parse(str_date));
		int weekNum = cal.get(Calendar.DAY_OF_WEEK);
		if (weekNum == 1) {//如果是周日，减一天，再得本周日期
			cal.add(cal.DATE, -1);
		}
		for (int i = 1; i <= 7; i++) {//外国认为1周的第一天是上周的星期日,周一第2天，
			cal.set(Calendar.DAY_OF_WEEK, i);//i值代表一周的第几天
			cal.add(Calendar.DAY_OF_WEEK, 1);//为得到的日期都加上一天，这样就得到中国理解的一周
			list_date.add(sdf.format(cal.getTime()));

		}

		return list_date;
	}

	/*
	 * 得到本周是一年中第几周
	 */
	public String getWeekOfYear(String monday, String saturday) {
		SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		try {
			cal.setTime(sdf2.parse(monday));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int weekofyear = cal.get(Calendar.WEEK_OF_YEAR);//本周属一年中第几周，注意，如果本周跨年了，则认为本周是次年的第1周
		//如果跨年，处理属于哪一年
		String year1 = monday.substring(0, 4);
		//这里用星期六来判断，是为了防止如下情况：12/26到12/31是周一到周六，周日为次年的1月1日，此时得出的weekofyear为本年的最后一周，非次年第1周，因为1月1号的周日被计算到次年的第1周
		String year2 = saturday.substring(0, 4);
		String str_weekofyear = year1 + "年第" + weekofyear + "周";//要存入记录表中的值
		if (!year1.equals(year2)) {//跨年了，用次年年号
			str_weekofyear = year2 + "年第" + weekofyear + "周";
		}
		return str_weekofyear;
	}

	/*
	 * 得到在线时长
	 */
	private String[] getOnlineData(long onlineHours) {
		String[] onlineData = new String[2];
		String str_online = "";
		//计算时长 
		long hour = onlineHours / (60 * 60 * 1000);//时
		long minute = (onlineHours - (hour * 60 * 60 * 1000)) / (60 * 1000);//分
		long second = (onlineHours - (hour * 60 * 60 * 1000) - (minute * 60 * 1000)) / 1000;//秒
		if (hour > 0) {
			str_online = hour + "小时";
		}
		if (minute > 0) {
			str_online += minute + "分";
		}
		str_online += second + "秒";
		String online_ok = hour >= 20 ? "合格" : "不合格";//人员在线时长是否合格
		onlineData[0] = str_online;
		onlineData[1] = online_ok;
		return onlineData;
	}

	public void initialize() {

	}
}
