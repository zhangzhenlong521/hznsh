package com.pushworld.ipushgrc.ui.score.p030;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.AbstractAction;
import javax.swing.JFileChooser;

import com.pushworld.ipushgrc.ui.score.ScoreUIUtil;
import com.pushworld.ipushgrc.ui.score.p020.RegisterEditWKPanel;
import com.pushworld.ipushgrc.ui.score.p050.ReduceApplyQueryPanel;

import cn.com.infostrategy.to.common.HashVO;
import cn.com.infostrategy.to.common.TBUtil;
import cn.com.infostrategy.to.common.WLTLogger;
import cn.com.infostrategy.to.mdata.BillCellVO;
import cn.com.infostrategy.to.mdata.BillVO;
import cn.com.infostrategy.to.report.ReportExportWord;
import cn.com.infostrategy.ui.common.AbstractWorkPanel;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.SplashWindow;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.mdata.BillListDialog;
import cn.com.infostrategy.ui.mdata.BillListPanel;

/**
 * 违规积分-》违规惩罚查询【李春娟/2015-01-28】
 * 列表按钮增加了【导出Excel】按钮
 * @author lcj
 *
 */
public class DealPunishLookWKPanel extends AbstractWorkPanel implements ActionListener {
	private WLTButton btn_print = new WLTButton("打印通知单");
	BillListPanel listPanel = new BillListPanel("SCORE_USER_LCJ_Q07");
	private ScoreUIUtil scoreuiutil = new ScoreUIUtil();
	private WLTButton btn_export;

	@Override
	public void initialize() {
		btn_export = new WLTButton("批量导出Word");
		String curryear = TBUtil.getTBUtil().getCurrDate().substring(0, 4);
		listPanel.QueryDataByCondition("EFFECTDATE like '" + curryear + "%'");//查询本年度的记录
		listPanel.addBatchBillListButton(new WLTButton[] { btn_print, btn_export });
		listPanel.repaintBillListButton();
		btn_print.addActionListener(this);
		btn_export.addActionListener(this);
		this.setLayout(new BorderLayout());
		this.add(listPanel);
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btn_print) {
			BillVO vo = listPanel.getSelectedBillVO();
			if (vo == null) {
				MessageBox.showSelectOne(this);
				return;
			}
			scoreuiutil.viewAndPrintCFBYCellPanel(this, vo.getStringValue("id"));
		} else if (e.getSource() == btn_export) {
			onExport();
		}

	}

	private void onExport() {
		final BillVO exportVOs[] = listPanel.getSelectedBillVOs();
		if (exportVOs.length == 0) {
			MessageBox.show(this, "请至少选择一条记录.");
			return;
		}
		JFileChooser fc = new JFileChooser();
		fc.setCurrentDirectory(new File("."));
		fc.setDialogTitle("请选择要保存到的目录,本次生存" + exportVOs.length + "个文件.");
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fc.setAcceptAllFileFilterUsed(false);
		int result = fc.showSaveDialog(this);

		if (result != JFileChooser.APPROVE_OPTION) { //如果不是确定的
			return;
		}
		final String savePath = fc.getSelectedFile().getPath();
		new SplashWindow(this, "正在导出...", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				SplashWindow splash = (SplashWindow) e.getSource();
				try {
					BillCellVO cellvo = null;
					try {
						cellvo = UIUtil.getMetaDataService().getBillCellVO("违规积分惩罚通知书模板", null, null);
					} catch (Exception ex) {
						WLTLogger.getLogger(RegisterEditWKPanel.class).error("没有找到[违规积分惩罚通知书模板]模版.");
					}
					try {
						if (cellvo == null) {
							BillListPanel listpanel = new BillListPanel(new cn.com.infostrategy.ui.report.cellcompent.CellTMO());
							listpanel.QueryDataByCondition(" templetcode like '%减免%'");
							BillListDialog listdialog = new BillListDialog(DealPunishLookWKPanel.this, "请选择想对应的模版", listpanel);
							listdialog.setVisible(true);
							if (listdialog.getCloseType() != 1) {
								return;
							}
							BillVO rtvos[] = listdialog.getReturnBillVOs();
							if (rtvos.length > 0) {
								cellvo = UIUtil.getMetaDataService().getBillCellVO(rtvos[0].getStringValue("templetcode"), null, null);
							} else {
								return;
							}
						}
					} catch (Exception ex) {
						ex.printStackTrace();
					}
					int count = exportVOs.length;
					ReportExportWord exportword = new ReportExportWord();
					for (int i = 0; i < count; i++) {
						HashVO hvo = new HashVO();
						String keys[] = exportVOs[i].getKeys();
						String names[] = exportVOs[i].getNames();
						for (int j = 0; j < keys.length; j++) {
							hvo.setAttributeValue(names[j].trim(), exportVOs[i].getStringViewValue(keys[j]));
							hvo.setAttributeValue(keys[j], exportVOs[i].getStringViewValue(keys[j]));
						}

						BillCellVO cellvo_new = UIUtil.getCommonService().parseCellTempetToWord(cellvo, hvo);
						try {
							exportword.exportWordFile(cellvo_new, savePath, i + "_" + exportVOs[i].getStringViewValue("deptid") + "_" + exportVOs[i].getStringViewValue("USERID"));
						} catch (Exception exx) {

						}
						splash.setWaitInfo("导出进度:" + (i + 1) + "/" + count);
					}
				} catch (Exception ex) {
					splash.closeWindow();
					ex.printStackTrace();
				}
			}
		}, false);
		MessageBox.show(this, "导出成功");
	}
}
