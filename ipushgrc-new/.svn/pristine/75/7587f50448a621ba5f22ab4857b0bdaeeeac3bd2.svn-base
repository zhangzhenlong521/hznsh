package com.pushworld.ipushlbs.ui.casemanage.p020;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

import javax.swing.JOptionPane;

import cn.com.infostrategy.to.common.WLTConstants;
import cn.com.infostrategy.to.common.WLTRemoteException;
import cn.com.infostrategy.to.mdata.BillVO;
import cn.com.infostrategy.to.mdata.ComBoxItemVO;
import cn.com.infostrategy.to.mdata.RefItemVO;
import cn.com.infostrategy.to.mdata.StringItemVO;
import cn.com.infostrategy.ui.common.AbstractWorkPanel;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTSplitPane;
import cn.com.infostrategy.ui.common.WLTTabbedPane;
import cn.com.infostrategy.ui.mdata.BillCardDialog;
import cn.com.infostrategy.ui.mdata.BillCardEditEvent;
import cn.com.infostrategy.ui.mdata.BillCardEditListener;
import cn.com.infostrategy.ui.mdata.BillCardPanel;
import cn.com.infostrategy.ui.mdata.BillListAfterQueryEvent;
import cn.com.infostrategy.ui.mdata.BillListAfterQueryListener;
import cn.com.infostrategy.ui.mdata.BillListPanel;
import cn.com.infostrategy.ui.mdata.BillListSelectListener;
import cn.com.infostrategy.ui.mdata.BillListSelectionEvent;

/**
 * 主诉案件--案件追踪
 * 
 * @author wupeng LawCaseTraceIntercept
 */
public class LawCaseTraceWKPanel extends AbstractWorkPanel implements ActionListener, BillListAfterQueryListener, BillListSelectListener, BillCardEditListener {

	private static final long serialVersionUID = 3498014789299449277L;

	private BillListPanel caseList = null;// 分割器上方的列表面板,案件列表面板
	private WLTButton addCaseBtn = null;// 新增按钮--新增案件--按钮

	private BillListPanel judgList = null;// 审理跟踪
	private WLTButton addJudge = null;// 分割器面板下面的按钮，新增追踪信息

	private BillCardPanel filingCard = null;// 立案追踪卡片
	private WLTButton addFiling, saveFiling, editFiling, cancelFiling;// 保存立案，新增立案,取消立案

	private WLTSplitPane split = null;
	private WLTTabbedPane tabPane = null;

	private BillCardPanel executeCard = null;// 执行卡片
	private WLTButton execute_addBtn, execute_updBtn, execute_delBtn, execute_saveBtn, cancelExecute;// 执行卡片上的保存确认按钮

	private BillCardPanel sumCard = null;// 结案总结

	private WLTButton sum_addBtn, sum_updBtn, sum_delBtn, sum_saveBtn, cancelSum;// 总结卡片上的保存确认按钮

	@Override
	public void initialize() {
		caseList = new BillListPanel("LBS_CASE_SELF_CODE2");
		addCaseBtn = new WLTButton("新增案件");
		addCaseBtn.addActionListener(this);
		WLTButton viewBasicInfo = WLTButton.createButtonByType(WLTButton.LIST_SHOWCARD);// 查看基本信息----案件面板上的
		caseList.addBatchBillListButton(new WLTButton[] { addCaseBtn, viewBasicInfo });
		caseList.repaintBillListButton();
		caseList.addBillListSelectListener(this);
		caseList.addBillListAfterQueryListener(this);
		tabPane = new WLTTabbedPane();

		InitFilingCard(); // 初始化立案页面
		tabPane.addTab("立案跟踪", filingCard);

		initJudgList();// 初始化判决
		tabPane.addTab("审理跟踪", judgList);

		InitExecuteCard(); // 初始化执行卡片
		tabPane.addTab("执行跟踪", executeCard);

		InitSumCard(); // 初始化总结卡片页面
		tabPane.addTab("结案报告", sumCard);

		split = new WLTSplitPane(WLTSplitPane.VERTICAL_SPLIT, caseList, tabPane);
		split.setDividerLocation(275);
		this.add(split);
	}

	private void initJudgList() {
		judgList = new BillListPanel("LBS_CASE_JUDGMENT_CODE1");
		addJudge = new WLTButton("新增");
		addJudge.addActionListener(this);
		judgList.addBatchBillListButton(new WLTButton[] { addJudge, WLTButton.createButtonByType(WLTButton.LIST_POPEDIT), WLTButton.createButtonByType(WLTButton.LIST_DELETE), WLTButton.createButtonByType(WLTButton.LIST_SHOWCARD) });
		judgList.repaintBillListButton();
	}

	private void InitFilingCard() {
		filingCard = new BillCardPanel("LBS_CASE_FILING_CODE1");
		filingCard.setGroupExpandable("立案信息", false);
		filingCard.addBillCardEditListener(this);

		saveFiling = new WLTButton("保存");
		saveFiling.addActionListener(this);

		addFiling = new WLTButton("新增");
		addFiling.addActionListener(this);

		editFiling = new WLTButton("修改");
		editFiling.addActionListener(this);

		cancelFiling = new WLTButton("取消修改");
		cancelFiling.addActionListener(this);

		filingCard.addBatchBillCardButton(new WLTButton[] { addFiling, editFiling, saveFiling, cancelFiling });
		filingCard.repaintBillCardButton();

		addFiling.setEnabled(true);
		saveFiling.setEnabled(false);
		editFiling.setEnabled(false);
		cancelFiling.setEnabled(false);
	}

	private void InitSumCard() {
		sumCard = new BillCardPanel("LBS_CASE_END_CODE1");
		sum_addBtn = new WLTButton("新增");
		sum_addBtn.addActionListener(this);
		sum_updBtn = new WLTButton("修改");
		sum_updBtn.addActionListener(this);
		sum_delBtn = new WLTButton("删除");
		sum_delBtn.addActionListener(this);
		sum_saveBtn = new WLTButton("保存");
		sum_saveBtn.addActionListener(this);
		cancelSum = new WLTButton("取消修改");
		cancelSum.addActionListener(this);
		sumCard.addBatchBillCardButton(new WLTButton[] { sum_addBtn, sum_updBtn, sum_delBtn, sum_saveBtn, cancelSum });
		sumCard.repaintBillCardButton();
		// 组折叠
		sumCard.setGroupExpandable("案件审理", false);
		sumCard.setGroupExpandable("案件总结", false);
		// 最开始的时候设置为不可用
		sum_saveBtn.setEnabled(false);
		sum_delBtn.setEnabled(false);
		sum_updBtn.setEnabled(false);
		sum_addBtn.setEnabled(true);
		cancelSum.setEnabled(false);
	}

	private void InitExecuteCard() {
		executeCard = new BillCardPanel("LBS_CASE_EXECUTE_CODE1");
		execute_addBtn = new WLTButton("新增");
		execute_addBtn.addActionListener(this);
		execute_updBtn = new WLTButton("修改");
		execute_updBtn.addActionListener(this);
		execute_delBtn = new WLTButton("删除");
		execute_delBtn.addActionListener(this);
		execute_saveBtn = new WLTButton("保存");
		execute_saveBtn.addActionListener(this);
		cancelExecute = new WLTButton("取消修改");
		cancelExecute.addActionListener(this);
		executeCard.addBatchBillCardButton(new WLTButton[] { execute_addBtn, execute_updBtn, execute_delBtn, execute_saveBtn, cancelExecute });
		executeCard.repaintBillCardButton();
		// 设置组隐藏
		executeCard.setGroupExpandable("案件执行跟踪", false);

		// 最开始的时候设置为不可用
		execute_saveBtn.setEnabled(false);
		execute_delBtn.setEnabled(false);
		execute_updBtn.setEnabled(false);
		execute_addBtn.setEnabled(true);
		cancelExecute.setEnabled(false);
	}

	public void actionPerformed(ActionEvent e) {

		Object obj = e.getSource();

		if (obj == addJudge)// 增加
			addJudgeItem();
		else if (obj == saveFiling)
			doSave(getFilingCardPanel());
		else if (obj == editFiling)
			doEdit(this.getFilingCardPanel());
		else if (obj == addFiling)
			doInsert(this.getFilingCardPanel());
		else if (obj == cancelFiling)
			onCancelFiling();
		else if (obj == addCaseBtn)// 新增案件
			clickAddCase();

		else if (obj == execute_addBtn) // 执行卡片 增加按钮
			doInsert(this.getExecuteCardPanel());
		else if (obj == execute_saveBtn)// 执行卡片 保存按钮
			doSave(this.getExecuteCardPanel());
		else if (obj == execute_updBtn)// 执行卡片 修改按钮
			doEdit(this.getExecuteCardPanel());
		else if (obj == execute_delBtn)// 执行卡片 删除按钮
			doDelete(this.getExecuteCardPanel());
		else if (obj == cancelExecute)
			onCancelExecute();

		else if (obj == sum_addBtn) // 结案卡片 增加按钮
			doInsert(this.getSumCardPanel());
		else if (obj == sum_saveBtn) // 结案卡片 保存按钮
			doSave(this.getSumCardPanel());
		else if (obj == sum_updBtn) // 结案卡片 修改按钮
			doEdit(this.getSumCardPanel());
		else if (obj == sum_delBtn) // 结案卡片 删除按钮
			doDelete(this.getSumCardPanel());
		else if (obj == cancelSum)
			onCancelSum();
		// else if(obj==lawer_addbtn)
		// addLawer();
	}

	/**
	 * 取消修改结案信息
	 */
	private void onCancelSum() {
		cancel(this.getSumCardPanel());
	}

	/**
	 * 取消修改执行信息
	 */
	private void onCancelExecute() {
		this.cancel(this.getExecuteCardPanel());
	}

	/**
	 * 取消修改立案信息
	 */
	private void onCancelFiling() {// 取消新增案件
		cancel(this.getFilingCardPanel());
	}

	private void cancel(BillCardPanel card) {
		if (getCaseListPanel().getSelectedBillVO() != null)
			this.changeValue(card, getCaseListPanel().getSelectedBillVO().getStringValue("id"));
		this.changeBtnState(card, "INIT");
	}

	// 新增判决信息
	@SuppressWarnings("unchecked")
	private void addJudgeItem() {
		BillVO vo = this.getCaseListPanel().getSelectedBillVO();
		if (vo == null) {
			MessageBox.show(this, "请选择案件");
			return;
		}
		String case_id = vo.getStringValue("id");
		HashMap map = new HashMap();
		map.put("CASE_ID", case_id);
		map.put("CASE_TYPE", "1");
		this.getJudgListPanel().doInsert(map);
	}

	private void doDelete(BillCardPanel cardPanel) {
		if (MessageBox.showConfirmDialog(cardPanel, "您真的想删除该记录吗?", "提示", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
			return; //
		}
		String str_sql = "delete from " + cardPanel.getTempletVO().getSavedtablename() + " where " + cardPanel.getTempletVO().getPkname() + "='" + cardPanel.getRealValueAt(cardPanel.getTempletVO().getPkname()) + "'"; //
		try {
			UIUtil.executeUpdateByDS(cardPanel.getDataSourceName(), str_sql);
		} catch (Exception e) {
			e.printStackTrace();
		} // 提交数据库
		cardPanel.clear();
		changeBtnState(cardPanel, "DELETE");
	}

	private void doEdit(BillCardPanel cardPanel) {
		cardPanel.updateCurrRow(); //
		cardPanel.setEditableByEditInit(); //
		changeBtnState(cardPanel, "EDIT");
	}

	private void doSave(BillCardPanel cardPanel) {
		cardPanel.stopEditing(); //
		if (!cardPanel.checkValidate()) {
			return;
		}
		try {
			cardPanel.updateData();
		} catch (Exception e) {
			e.printStackTrace();
		}
		MessageBox.show(this, "保存数据成功!!"); //
		changeBtnState(cardPanel, "SAVE");
		cardPanel.setEditable(false);
	}

	/**
	 * 点击了“新增案件” 按钮 新增按钮其实执行的是更新事件，主要目的是将数据库中的status字段更新为“END”
	 */
	private void clickAddCase() {
		BillListPanel top = this.getCaseListPanel();// 得到案件面板
		BillCardPanel card = new BillCardPanel(top.templetVO);
		card.addBillCardEditListener(this);

		BillCardDialog dialog = new BillCardDialog(top, "新增" + top.templetVO.getTempletname(), card, WLTConstants.BILLDATAEDITSTATE_UPDATE);
		dialog.setVisible(true);// 弹框

		if (dialog.getCloseType() == 1) {
			BillVO dialogVo = dialog.getBillVO();
			if (dialogVo == null)
				return;

			String sql = "update " + top.templetVO.getTablename() + " set status='END' where id = " + dialogVo.getStringValue("id");
			try {
				UIUtil.executeUpdateByDS(null, sql);// 更新字段的值,主要目的达成
			} catch (WLTRemoteException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

			int newRow = top.newRow();
			top.setSelectedRow(newRow);
			top.setBillVOAt(newRow, dialogVo);
			top.refreshCurrSelectedRow();// 刷新数值
		}
	}

	/**
	 * 列表弹出新增 新增一条记录
	 * 
	 * @param e
	 */
	@SuppressWarnings( { "unchecked", "unchecked" })
	private void doInsert(BillCardPanel card) {
		BillVO vo = this.getCaseListPanel().getSelectedBillVO();
		if (vo == null) {
			MessageBox.show(this, "请选择案件操作!");
			return;
		}
		card.insertRow(); //
		card.setEditableByInsertInit(); //

		String case_id = vo.getStringValue("id");
		card.setValueAt("case_id", new StringItemVO(case_id)); // 案件id
		card.setValueAt("case_type", new StringItemVO("1")); // 案件类型 1为主诉
		changeBtnState(card, "INSERT");
	}

	public void onBillListSelectChanged(BillListSelectionEvent event) {

		BillListPanel source = event.getBillListPanel();
		String id = source.getSelectedBillVO().getStringValue("id"); // 案件ID

		this.changeValue(this.getFilingCardPanel(), id);// 立案信息
		this.changeValue(this.getJudgListPanel(), id);// 判决信息
		this.changeValue(this.getExecuteCardPanel(), id);// 执行信息
		this.changeValue(this.getSumCardPanel(), id);// 结案信息

	}

	private void changeValue(BillListPanel list, String id) {
		list.clearTable();
		list.QueryDataByCondition(" case_id =  " + id + " and case_type = '1'");
		list.refreshData();
	}

	private void changeValue(BillCardPanel card, String id) {
		card.clear();
		card.setVisiable(card.getTempletVO().getItemKeys(), true);
		card.refreshData(" case_id =  " + id + " and case_type = '1'");
		changeBtnState(card, "INIT");
	}

	public void changeBtnState(BillCardPanel card, String state) {
		if (card.getTempletVO().getTempletcode().equals("LBS_CASE_EXECUTE_CODE1")) {
			changeBtnState(card, execute_addBtn, execute_updBtn, execute_saveBtn, execute_delBtn, cancelExecute, state);
		}

		if (card.getTempletVO().getTempletcode().equals("LBS_CASE_END_CODE1")) {
			changeBtnState(card, sum_addBtn, sum_updBtn, sum_saveBtn, sum_delBtn, cancelSum, state);
		}

		if (card.getTempletVO().getTempletcode().equals("LBS_CASE_FILING_CODE1")) {
			changeBtnState(card, addFiling, editFiling, saveFiling, null, cancelFiling, state);
		}

	}

	// 根据当前数据状态，改变按钮状态
	/*
	 * 参数 card，按钮所在卡片 add:新增按钮 edit：编辑按钮 delete：删除按钮 cancel:删除按钮 state：状态
	 */
	private void changeBtnState(BillCardPanel card, WLTButton add, WLTButton edit, WLTButton save, WLTButton delete, WLTButton cancel, String state) {
		if (state.equals("INIT")) { // 如果是点击上边的案件LIST进来的
			if (card.getBillVO().getStringValue("case_id") == null || "".equals(card.getBillVO().getStringValue("case_id"))) { // 如果之前没有插入过数据
				if (add != null)
					add.setEnabled(true);
				if (edit != null)
					edit.setEnabled(false);
				if (delete != null)
					delete.setEnabled(false);
			} else { // 之前有数据
				if (add != null)
					add.setEnabled(false);
				if (edit != null)
					edit.setEnabled(true);
				if (delete != null)
					delete.setEnabled(true);
			}
			if (save != null)
				save.setEnabled(false);
			if (cancel != null)
				cancel.setEnabled(false);
		} else if (state.equals("EDIT")) {// 点击了“编辑”按钮
			if (add != null)
				add.setEnabled(false);
			if (edit != null)
				edit.setEnabled(false);
			if (delete != null)
				delete.setEnabled(true);
			if (save != null)
				save.setEnabled(true);
			if (cancel != null)
				cancel.setEnabled(true);
		} else if (state.equals("DELETE")) {// 点了 删除 按钮
			if (add != null)
				add.setEnabled(true);
			if (edit != null)
				edit.setEnabled(false);
			if (delete != null)
				delete.setEnabled(false);
			if (save != null)
				save.setEnabled(false);
			if (cancel != null)
				cancel.setEnabled(false);
		} else if (state.equals("SAVE")) {// 保存
			if (add != null)
				add.setEnabled(false);
			if (edit != null)
				edit.setEnabled(true);
			if (delete != null)
				delete.setEnabled(true);
			if (save != null)
				save.setEnabled(false);
			if (cancel != null)
				cancel.setEnabled(false);
		} else if (state.equals("INSERT")) {// 新增
			if (add != null)
				add.setEnabled(false);
			if (edit != null)
				edit.setEnabled(false);
			if (delete != null)
				delete.setEnabled(false);
			if (save != null)
				save.setEnabled(true);
			if (cancel != null)
				cancel.setEnabled(true);
		}
	}

	/**
	 * 卡片编辑监听器
	 */
	public void onBillCardValueChanged(BillCardEditEvent evt) {
		if (evt.getItemKey() == null)
			return;

		if (evt.getItemKey().equalsIgnoreCase("SENDPROCEEDING")) {// 如果是案件名称列发生变化,改变卡片的值
			changeCaseCard(evt);
		}
		if (evt.getSource() == this.getFilingCardPanel() && evt.getItemKey().equalsIgnoreCase("IS_REGIST")) {// 立案卡片上的是否立案条目改变
			setCardItemVisible(evt);
		}
	}

	/**
	 * 设置卡片上的组显示隐藏
	 * 
	 * @param billCardPanel
	 * 
	 * @param evt
	 */
	private void setCardItemVisible(BillCardEditEvent evt) {
		ComBoxItemVO vo = (ComBoxItemVO) evt.getNewObject();
		if (vo == null)
			return;
		BillCardPanel card = (BillCardPanel) evt.getSource();

		if (vo.getId().equals("是")) {
			card.setVisiable(card.getTempletVO().getItemKeys(), true);
			card.setVisiable("REASON", false);
		} else if (vo.getId().equals("否")) {// 如果不立案
			card.setVisiable(card.getTempletVO().getItemKeys(), false);
			card.setVisiable("IS_REGIST", true);
			card.setVisiable("REASON", true);
		}
	}

	/**
	 * 填充上增加案件卡片的值
	 * 
	 * @param evt
	 */
	private void changeCaseCard(BillCardEditEvent evt) {
		RefItemVO refvo = (RefItemVO) evt.getNewObject();// 得到变化后的值
		BillCardPanel card = (BillCardPanel) evt.getSource();// 得到事件源
		String codevalue = card.getRealValueAt("CODE");
		card.reset();// 清空card的值
		if (refvo == null)// 如果新值是空，返回
			return;

		BillListPanel top = this.getCaseListPanel();// 案件列表面板
		String id = refvo.getId();// 得到参照的id
		String sql = "select * from " + top.templetVO.getTablename() + "  where id = " + id;// 从数据库查处记录
		BillVO[] vos = null;
		try {
			vos = UIUtil.getBillVOsByDS(null, sql, top.templetVO);
		} catch (WLTRemoteException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (vos != null) {
			vos[0].setObject("STATUS", "END");// 将status的值更新为END
			vos[0].setObject("CODE", new StringItemVO(codevalue));
			card.setBillVO(vos[0]);// 将记录塞到card里
			card.repaint();
		}
	}

	private BillListPanel getCaseListPanel() {
		return caseList;
	}

	private BillListPanel getJudgListPanel() {
		return this.judgList;
	}

	private BillCardPanel getFilingCardPanel() {
		return filingCard;
	}

	private BillCardPanel getExecuteCardPanel() {
		return executeCard;
	}

	private BillCardPanel getSumCardPanel() {
		return sumCard;
	}

	public void onBillListAfterQuery(BillListAfterQueryEvent _event) {
		// TODO Auto-generated method stub
		filingCard.getBillCardBtn("新增").setEnabled(true);
		filingCard.getBillCardBtn("保存").setEnabled(false);
		filingCard.getBillCardBtn("修改").setEnabled(false);
		filingCard.getBillCardBtn("取消修改").setEnabled(false);
		filingCard.clear();
		judgList.clearTable();
		executeCard.clear();
		executeCard.getBillCardBtn("新增").setEnabled(true);
		executeCard.getBillCardBtn("修改").setEnabled(false);
		executeCard.getBillCardBtn("删除").setEnabled(false);
		executeCard.getBillCardBtn("保存").setEnabled(false);
		executeCard.getBillCardBtn("取消修改").setEnabled(false);
		sumCard.clear();
		sumCard.getBillCardBtn("新增").setEnabled(true);
		sumCard.getBillCardBtn("修改").setEnabled(false);
		sumCard.getBillCardBtn("删除").setEnabled(false);
		sumCard.getBillCardBtn("保存").setEnabled(false);
		sumCard.getBillCardBtn("取消修改").setEnabled(false);
		

	}

}
