package com.pushworld.icase.ui.p010;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.swing.JPanel;

import cn.com.infostrategy.to.common.WLTConstants;
import cn.com.infostrategy.to.common.WLTLogger;
import cn.com.infostrategy.to.common.WLTRemoteException;
import cn.com.infostrategy.to.mdata.BillVO;
import cn.com.infostrategy.to.mdata.StringItemVO;
import cn.com.infostrategy.ui.common.BillDialog;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTPanel;
import cn.com.infostrategy.ui.common.WLTRadioPane;
import cn.com.infostrategy.ui.common.WLTTabbedPane;
import cn.com.infostrategy.ui.mdata.BillCardPanel;
import cn.com.infostrategy.ui.mdata.BillListPanel;
import cn.com.infostrategy.ui.report.BillHtmlPanel;

public class CasePreventionQuestionOperateListener extends CasePreventionAbstractListener {
	
	private org.apache.log4j.Logger log = WLTLogger.getLogger(CasePreventionQuestionOperateListener.class);
	
	private WLTButton btn_employee_add, btn_employee_edit, btn_employee_del, btn_employee_look;
	
	private IllegalEmployeeUtil employee;
	
	private BillListPanel listpanel3;
	
	private WLTButton btn_confirm, btn_cancel;
	
	private WLTRadioPane rpanel;
	
	private String relationname;
	private String relationvalue;
	private String project_approval_id;
	private String deptid;
	
	private String channels;
	
	/**
	 * 
	 * @param listPanel
	 * @param templetcode
	 * @param status
	 * @param relationname
	 * @param relationvalue
	 * @param PROJECTAPPROVAL_AUDIT_ID
	 * @param deptid
	 * @param channels 发现渠道
	 */
	public CasePreventionQuestionOperateListener(BillListPanel listPanel, String templetcode, int status, String relationname, String relationvalue,String PROJECTAPPROVAL_AUDIT_ID, String deptid, String channels){
		this.case_self_list = listPanel;
		this.templetcode = templetcode;
		this.status = status;
		this.relationname = relationname;
		this.relationvalue = relationvalue;
		this.project_approval_id = PROJECTAPPROVAL_AUDIT_ID;
		this.deptid = deptid;
		this.channels = channels;
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = null;
		if(null!=e){
			obj = e.getSource();
		}
		if(null!=obj && obj==btn_employee_add){
			employee.onEmployeeAdd();
		}else if(null!=obj && obj==btn_employee_edit){
			employee.onEmployeeEdit();
		}else if(null!=obj && obj==btn_employee_del){
			employee.onEmployeeDel();
		}else if(null!=obj && obj==btn_employee_look){
			employee.onEmployeeLook();
		}else if(null!=obj && obj==btn_confirm){	
			if(!cardPanel.checkValidate()){
				return;
			}
			
			String questionhappendate = cardPanel.getBillVO().getStringValue("questionhappendate");
			String questionfanddate   = cardPanel.getBillVO().getStringValue("questionfanddate");
			String abarbeitungfinishdate=cardPanel.getBillVO().getStringValue("abarbeitungfinishdate");
			
			BillVO[] vos = listpanel3.getBillVOs();

			if(WLTStringUtils.hasText(questionfanddate) && WLTStringUtils.hasText(questionhappendate)){
				Calendar fangdate = CalendarUtils.formatYearMonthDayToDate(questionfanddate);
				Calendar happend  = CalendarUtils.formatYearMonthDayToDate(questionhappendate);
				Calendar finishdate=CalendarUtils.formatYearMonthDayToDate(abarbeitungfinishdate);
				if(fangdate.getTimeInMillis()-happend.getTimeInMillis()<0){
					MessageBox.show(caseSelfDialog, "问题发现日期不能大于问题发生日期！");
					return;
				}
				
				if(fangdate.getTimeInMillis()-finishdate.getTimeInMillis()>0){
					MessageBox.show(caseSelfDialog, "问题发现日期不能大于整改完成日期！");
					return;
				}
				
				if(happend.getTimeInMillis()-finishdate.getTimeInMillis()>0){
					MessageBox.show(caseSelfDialog, "问题发生日期不能大于整改完成日期！");
					return;
				}
			}
	
			if(vos.length<1){
				MessageBox.show(caseSelfDialog, "违规员工信息为空！");
				return;
			}
			
			double questionstrokecount = Double.parseDouble(cardPanel.getBillVO().getStringValue("questionstrokecount"));
			double questionmoney = Double.parseDouble(cardPanel.getBillVO().getStringValue("questionmoney"));
			double questionstrokecountD = 0;
			double questionmoneyD = 0;
			for(BillVO vo : vos){
				double illegal_stroke_count = Double.parseDouble(vo.getStringValue("illegal_stroke_count"));
				questionstrokecountD = DoubleUtil.add(questionstrokecountD, illegal_stroke_count);
				double illegal_money = Double.parseDouble(vo.getStringValue("illegal_money"));
				questionmoneyD = DoubleUtil.add(questionmoneyD, illegal_money);
			}
			/*
			 *
			if(questionstrokecount-questionstrokecountD!=0){
				MessageBox.show(caseSelfDialog, "所有违规员工的违规问题笔数不等于问题的违规问题笔数！");
				return;
			}
			 
			 
			if(questionmoney-questionmoneyD!=0){
				MessageBox.show(caseSelfDialog, "所有违规员工的违规问题金额不等于问题的问题金额！");
				return;
			}
			*/
			try {     
				if(WLTStringUtils.hasText(cardPanel.getBillVO().getStringValue("cp_implement_id"))){
					String check_dept = UIUtil.getStringValueByDS(null, "select check_dept from cp_implement where id="+ cardPanel.getBillVO().getStringValue("cp_implement_id"));
					cardPanel.setValueAt("check_corp", new StringItemVO(check_dept));
				}
				
			} catch (WLTRemoteException e1) {
				log.error(e1);
				MessageBox.show(cardPanel, "连接远程服务失败！");
				return;
			} catch (Exception e1) {
				log.error(e1);
				MessageBox.show(cardPanel, "连接远程服务失败！");
				return;
			}
		
			onConfirm(null, null);

		}else if(null!=obj && obj==btn_cancel){
			onCancel();
		}else{
			cardPanel=new BillCardPanel(templetcode);
			if(status!=1){
				caseSelfBillVO=case_self_list.getSelectedBillVO();
				if(caseSelfBillVO==null){
					MessageBox.showSelectOne(case_self_list);
					return;
				}
				cardPanel.queryDataByCondition("id="+caseSelfBillVO.getStringValue("id"));
			}
			WLTTabbedPane tab_panel=new WLTTabbedPane();
			
			if(status==1){
				cardPanel.insertRow();
				cardPanel.setEditState(WLTConstants.BILLDATAEDITSTATE_INSERT);
				cardPanel.setEditableByInsertInit();
				
				cardPanel.setValueAt(relationname, new StringItemVO(relationvalue));
				
				cardPanel.setValueAt("channels", new StringItemVO(channels));
				if(WLTStringUtils.hasText(project_approval_id)){
					cardPanel.setValueAt("relevanceprojectnumber", new StringItemVO(project_approval_id));
				}
			}else if(status==2){ 
				cardPanel.setEditState(WLTConstants.BILLDATAEDITSTATE_UPDATE);
				cardPanel.setEditableByEditInit();
			}else if(status==4){
				cardPanel.setEditState(WLTConstants.BILLDATAEDITSTATE_INIT);
			}else if(status==3){
				if(!MessageBox.confirm(case_self_list, "确认删除问题？")){
					return;
				}
				
				List<String> _sqllist = new ArrayList<String>();
				
				try {
					_sqllist.add("delete from cp_question where id="+caseSelfBillVO.getStringValue("id"));
					if("内控检查".equals(channels)){
						_sqllist.add("delete from CP_ILLEGAL_EMPLOYEE where id in (select id from CP_ILLEGAL_EMPLOYEE where type='内控检查' and parentid="+caseSelfBillVO.getStringValue("id")+")");
					}else if("合规检查".equals(channels)){
						_sqllist.add("delete from CP_ILLEGAL_EMPLOYEE where id in (select id from CP_ILLEGAL_EMPLOYEE where type='合规检查' and parentid="+caseSelfBillVO.getStringValue("id")+")");
					}else{
					_sqllist.add("delete from CP_ILLEGAL_EMPLOYEE where id in (select id from CP_ILLEGAL_EMPLOYEE where type='案防排查' and parentid="+caseSelfBillVO.getStringValue("id")+")");
					}
					UIUtil.executeBatchByDS(null, _sqllist);
					MessageBox.show(case_self_list, "删除成功！");
					case_self_list.refreshData();
					return;
				} catch (WLTRemoteException ex) {
					log.error(ex);
					MessageBox.show(case_self_list, "删除失败！");
					return;
				} catch (Exception ex) {
					log.error(ex);
					MessageBox.show(case_self_list, "删除失败！");
					return;
				}
			}
			
			if(WLTStringUtils.hasText(deptid)){
				if(deptid.indexOf(";")<0){
					cardPanel.setValueAt("byestingdept", new StringItemVO(deptid));
				}else{
					cardPanel.setValueAt("byestingdept", new StringItemVO(deptid.substring(1, deptid.length()-1).replaceAll(";", ",")));
				}
			
			}
			
			if(WLTStringUtils.hasText(deptid)){
				listpanel3=new BillListPanel("CP_ILLEGAL_EMPLOYEE_CODE1_1");
			}else{
				listpanel3=new BillListPanel("CP_ILLEGAL_EMPLOYEE_CODE1");
			}
			listpanel3.getQuickQueryPanel().setVisible(false);
			if(status==1 || status==2){
				btn_employee_add = new WLTButton("新增");
				btn_employee_add.addActionListener(this);
				listpanel3.addBillListButton(btn_employee_add);
				
				btn_employee_edit = new WLTButton("修改");
				btn_employee_edit.addActionListener(this);
				listpanel3.addBillListButton(btn_employee_edit);
				
				btn_employee_del = new WLTButton("删除");
				btn_employee_del.addActionListener(this);
				listpanel3.addBillListButton(btn_employee_del);
			}
			
			btn_employee_look = new WLTButton("浏览/打印");
			btn_employee_look.addActionListener(this);
			listpanel3.addBillListButton(btn_employee_look);
			listpanel3.repaintBillListButton();
			
			if(null!=caseSelfBillVO){
				
				if("内控检查".equals(channels)){
					listpanel3.setDataFilterCustCondition("channels='内控检查' and parentid="+caseSelfBillVO.getStringValue("id"));
				}else if("合规检查".equals(channels)){
					listpanel3.setDataFilterCustCondition("channels='合规检查' and parentid="+caseSelfBillVO.getStringValue("id"));
				}else{
					listpanel3.setDataFilterCustCondition("channels='案防排查' and parentid="+caseSelfBillVO.getStringValue("id"));
				}
				
				//listpanel3.setDataFilterCustCondition("type='案防排查' and parentid="+caseSelfBillVO.getStringValue("id"));
				//listpanel3.setDataFilterCustCondition("channels='案防排查' and parentid="+caseSelfBillVO.getStringValue("id"));
				listpanel3.QueryDataByCondition(null);
			}else{
				if("内控检查".equals(channels)){
					listpanel3.setDataFilterCustCondition("channels='内控检查' and parentid="+cardPanel.getBillVO().getStringValue("id"));
				}else if("合规检查".equals(channels)){
					listpanel3.setDataFilterCustCondition("channels='合规检查'  and parentid="+cardPanel.getBillVO().getStringValue("id"));
				}else{
					listpanel3.setDataFilterCustCondition("channels='案防排查' and parentid="+cardPanel.getBillVO().getStringValue("id"));
				}
				//listpanel3.setDataFilterCustCondition("channels='案防排查' and parentid="+cardPanel.getBillVO().getStringValue("id"));
				listpanel3.QueryDataByCondition(null);
			}
			
			//  每个卡片增加网页浏览
			rpanel=new WLTRadioPane();
			rpanel.addTab("控件风格", cardPanel);
			BillHtmlPanel html1=new BillHtmlPanel();
			html1.loadHtml(cardPanel.getExportHtml());
			rpanel.addTab("打印预览", html1);
			
			tab_panel.addTab("问题",rpanel);		
			tab_panel.addTab("违规员工",listpanel3);
			
			caseSelfDialog=new BillDialog(case_self_list);
			caseSelfDialog.add(tab_panel);
			
			if(WLTStringUtils.hasText(deptid)){
				employee = new IllegalEmployeeUtil(caseSelfDialog, cardPanel, listpanel3, "CP_ILLEGAL_EMPLOYEE_CODE1_1", deptid, channels);
			}else{
				employee = new IllegalEmployeeUtil(caseSelfDialog, cardPanel, listpanel3, "CP_ILLEGAL_EMPLOYEE_CODE1", deptid, channels);
			}
			
			caseSelfDialog.setSize(760, 690);
			caseSelfDialog.locationToCenterPosition();
			caseSelfDialog.getContentPane().add(getSouthPanel(), BorderLayout.SOUTH);
			caseSelfDialog.setVisible(true);
		}
	}

	private JPanel getSouthPanel() {
		JPanel panel = WLTPanel.createDefaultPanel(new FlowLayout());	
		if(status==1 || status==2){
			btn_confirm = new WLTButton("保存");
		}
		
		btn_cancel = new WLTButton("关闭");
		if(status==1 || status==2){
			btn_confirm.addActionListener(this); //
		}
		btn_cancel.addActionListener(this); //
		if(status==1 || status==2){
			panel.add(btn_confirm); //
		}
		panel.add(btn_cancel); //
		
		
		return panel;
	}

}
