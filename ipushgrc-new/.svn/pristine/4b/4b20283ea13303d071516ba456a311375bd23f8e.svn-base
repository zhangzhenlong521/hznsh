package com.pushworld.ipushgrc.ui.rule.p010;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JMenuItem;
import javax.swing.JSplitPane;
import javax.swing.tree.DefaultMutableTreeNode;

import cn.com.infostrategy.to.common.WLTRemoteException;
import cn.com.infostrategy.to.mdata.BillVO;
import cn.com.infostrategy.to.mdata.StringItemVO;
import cn.com.infostrategy.to.mdata.UpdateSQLBuilder;
import cn.com.infostrategy.to.mdata.templetvo.BillTreeNodeVO;
import cn.com.infostrategy.ui.common.BillDialog;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTSplitPane;
import cn.com.infostrategy.ui.mdata.BillCardPanel;
import cn.com.infostrategy.ui.mdata.BillTreePanel;
import cn.com.infostrategy.ui.mdata.BillTreeSelectListener;
import cn.com.infostrategy.ui.mdata.BillTreeSelectionEvent;

public class RuleItemEditDialog extends BillDialog implements ActionListener, BillTreeSelectListener {

	private BillTreePanel billTree_lawitem = null; //
	private BillCardPanel billCard_lawitem = null; //

	private BillVO selectrule = null;

	private JMenuItem item_insert, item_delete;

	private WLTButton btn_save = new WLTButton("保存", UIUtil.getImage("zt_054.gif"));

	private boolean haveChanged = false;

	public RuleItemEditDialog(Container _parent, String _title, int _width, int li_height) {
		this(_parent, _title, _width, li_height, null);
	}

	public RuleItemEditDialog(Container _parent, String _title, int _width, int li_height, BillVO _selectRule) {
		super(_parent, _title, _width, li_height);
		selectrule = _selectRule;
		initialize();
	}

	private void initialize() {
		billTree_lawitem = new BillTreePanel("RULE_RULE_ITEM_CODE1"); //
		billCard_lawitem = new BillCardPanel("RULE_RULE_ITEM_CODE1"); //
		billCard_lawitem.addBillCardButton(btn_save); // 把保存按钮添加到卡片面板！
		billCard_lawitem.repaintBillCardButton();
		BillTreeNodeVO treenodevo = (BillTreeNodeVO) billTree_lawitem.getRootNode().getUserObject();// 
		treenodevo.setText(selectrule.getStringValue("rulename"));
		billTree_lawitem.getRootNode().setUserObject(treenodevo);
		billTree_lawitem.queryDataByCondition(" ruleid = " + selectrule.getStringValue("id"));
		WLTSplitPane split = new WLTSplitPane(JSplitPane.HORIZONTAL_SPLIT, billTree_lawitem, billCard_lawitem); //
		split.setDividerLocation(250);
		billTree_lawitem.addBillTreeSelectListener(this);
		item_insert = new JMenuItem("新增");
		item_delete = new JMenuItem("删除");
		item_insert.addActionListener(this);
		item_delete.addActionListener(this);
		billTree_lawitem.setAppMenuItems(new JMenuItem[] { item_insert, item_delete });
		btn_save.addActionListener(this);
		billTree_lawitem.setDragable(true);
		this.getContentPane().add(split); //
	}

	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();
		if (obj == item_insert) {
			onItemInsert();
		} else if (obj == item_delete) {
			onItemDelete();
		} else if (obj == btn_save) {
			onItemSave();
		}
	}

	/**
	 * 右键树点击新增
	 */
	private void onItemInsert() {
		billCard_lawitem.insertRow();
		billCard_lawitem.setEditableByInsertInit();
		if (billTree_lawitem.getSelectedNode().getChildCount() > 0) { // 判断有没有子节点
			String max_str_seq = billTree_lawitem.getBillVOFromNode((DefaultMutableTreeNode) billTree_lawitem.getSelectedNode().getLastChild()).getStringValue("seq");
			if (max_str_seq == null) {
				billTree_lawitem.resetChildSeq();
				max_str_seq = billTree_lawitem.getBillVOFromNode((DefaultMutableTreeNode) billTree_lawitem.getSelectedNode().getLastChild()).getStringValue("seq");
			}
			billCard_lawitem.setValueAt("seq", new StringItemVO(Integer.parseInt(max_str_seq) + 1 + ""));
		} else {
			billCard_lawitem.setValueAt("seq", new StringItemVO("1"));
		}
		String treeid = null;
		if (!billTree_lawitem.getSelectedNode().isRoot()) {
			treeid = billTree_lawitem.getSelectedVO().getStringValue("id");
		}
		billCard_lawitem.setValueAt("parentid", new StringItemVO(treeid));
		billCard_lawitem.setValueAt("ruleid", new StringItemVO(selectrule.getStringValue("id")));
	}

	/**
	 * 右键树点击删除
	 */
	private void onItemDelete() {
		if (billTree_lawitem.getSelectedNode().isRoot()) {
			MessageBox.show(billTree_lawitem, "根节点不能删除！");
			return;
		}
		DefaultMutableTreeNode snode = billTree_lawitem.getSelectedNode();
		if (!snode.isLeaf()) {
			if (MessageBox.showConfirmDialog(billTree_lawitem, "是否删除跟节点下的所有数据?", "删除列?", 0) != 0)
				return;
			try {
				BillVO billvo[] = billTree_lawitem.getSelectedChildPathBillVOs();
				ArrayList al_sql = new ArrayList();
				for (int i = 0; i < billvo.length; i++) {
					String id = billvo[i].getStringValue("id");
					al_sql.add("delete from  rule_rule_item where id=" + id + "");
				}
				UIUtil.executeBatchByDS(null, al_sql);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else if (snode.isLeaf()) {
			if (MessageBox.showConfirmDialog(billTree_lawitem, "是否删除当前数据?", "删除列?", 0) != 0)
				return;
			try {
				UIUtil.executeUpdateByDS(null, (new StringBuilder("delete from rule_rule_item where id=")).append(billTree_lawitem.getSelectedVO().getStringValue("id")).toString());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		billTree_lawitem.delCurrNode();
		billCard_lawitem.clear();
		setHaveChanged(true);
	}

	/**
	 * 保存条目内容
	 */
	private void onItemSave() {
		if (!billCard_lawitem.checkValidate()) {
			return;
		}
		try {
			String stade = billCard_lawitem.getEditState();
			if (stade.equals("INSERT")) {
				billCard_lawitem.updateData();
				billTree_lawitem.addNode(billCard_lawitem.getBillVO());
				billTree_lawitem.updateUI();
			} else if (stade.equals("UPDATE")) {
				String str_newsubject = ((StringItemVO) billCard_lawitem.getValueAt(billTree_lawitem.getTempletVO().getTreeviewfield())).getStringValue();
				billTree_lawitem.setBillVOForCurrSelNode(billCard_lawitem.getBillVO());
				billCard_lawitem.updateData();
				billTree_lawitem.updateUI();
			}
			MessageBox.show(this, "保存成功！");
			setHaveChanged(true);
		} catch (Exception e) {
			MessageBox.showException(this, e); //
		}

	}

	public void onBillTreeSelectChanged(BillTreeSelectionEvent _event) {
		BillVO billvo = _event.getCurrSelectedVO();
		if (billvo == null) {
			billCard_lawitem.clear();
			billCard_lawitem.setEditable(false);
		} else {
			String str_id = billvo.getStringValue(billCard_lawitem.getTempletVO().getPkname());
			billCard_lawitem.queryDataByCondition((new StringBuilder(String.valueOf(billCard_lawitem.getTempletVO().getPkname()))).append("=").append(str_id).toString());
			billCard_lawitem.setEditState("UPDATE");
			billCard_lawitem.setEditableByEditInit();
		}
	}

	public boolean isHaveChanged() {
		return haveChanged;
	}

	public void setHaveChanged(boolean haveChanged) {
		this.haveChanged = haveChanged;
	}

}
