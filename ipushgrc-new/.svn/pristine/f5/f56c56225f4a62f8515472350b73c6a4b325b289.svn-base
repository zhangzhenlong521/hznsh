package com.pushworld.ipushgrc.ui.icheck.p090;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.pushworld.ipushgrc.ui.icheck.p080.ZZLUIUtil;

import cn.com.infostrategy.to.common.HashVO;
import cn.com.infostrategy.to.common.WLTRemoteException;
import cn.com.infostrategy.ui.common.AbstractWorkPanel;
import cn.com.infostrategy.ui.common.MessageBox;
import cn.com.infostrategy.ui.common.UIUtil;
import cn.com.infostrategy.ui.common.WLTButton;
import cn.com.infostrategy.ui.common.WLTSplitPane;
import cn.com.infostrategy.ui.mdata.BillListHtmlHrefEvent;
import cn.com.infostrategy.ui.mdata.BillListHtmlHrefListener;
import cn.com.infostrategy.ui.mdata.BillListSelectListener;
import cn.com.infostrategy.ui.mdata.BillListSelectionEvent;
import cn.com.infostrategy.ui.mdata.BillQueryPanel;
import cn.com.infostrategy.ui.report.BillCellPanel;
import cn.com.infostrategy.ui.report.cellcompent.ExcelUtil;

/**
 * 检查统计
 * 
 * @author zzl
 * 
 */
public class CheckWorloadWKPanle extends AbstractWorkPanel implements
		ActionListener, ChangeListener, BillListHtmlHrefListener,
		BillListSelectListener {

	private BillCellPanel cell = null;
	private BillQueryPanel query = new BillQueryPanel("CK_SCHEME_ZZL_E01_2");
	private WLTButton btn_export = new WLTButton("导出Excel");

	public void initialize() {
		cell = new BillCellPanel("检查工作量统计表");
		cell.setToolBarVisiable(false);
		query.addBillQuickActionListener(this);
		JPanel mainPanel = new JPanel(new BorderLayout());
		mainPanel.add(getBtnPanel(), BorderLayout.NORTH);
		mainPanel.add(cell, BorderLayout.CENTER);
		WLTSplitPane splitpanel = new WLTSplitPane(WLTSplitPane.VERTICAL_SPLIT,
				query, mainPanel);
		splitpanel.setOpaque(false);
		splitpanel.setDividerLocation(60);
		this.add(splitpanel);
	}

	private Component getBtnPanel() {
		JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		panel.setOpaque(false);
		btn_export.addActionListener(this);
		panel.add(btn_export);
		return panel;
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == query) {
			onQuery();
		} else if (e.getSource() == btn_export) {
			exportExcel();
		}

	}

	private void exportExcel() {
		int col = cell.getColumnCount();
		int row = cell.getRowCount();
		final JFileChooser fc = new JFileChooser();
		fc.setCurrentDirectory(new File("."));
		fc.setDialogTitle("请选择要保存到的目录");
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fc.setAcceptAllFileFilterUsed(false);
		int result = fc.showSaveDialog(this);
		if (result != JFileChooser.APPROVE_OPTION) { // 如果不是确定的
			return;
		}
		String savePath = fc.getSelectedFile().getPath();
		ExcelUtil excel = new ExcelUtil();
		String[][] imexcel = new String[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				try {
					String str = cell.getValueAt(i, j);
					imexcel[i][j] = str;

				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}
		savePath = savePath + "\\检查工作量统计表.xls";
		excel.setDataToExcelFile(imexcel, savePath);
		MessageBox.show(this, "导出成功");

	}

	private void onQuery() {
		int col = cell.getColumnCount();
		int row = cell.getRowCount();
		Object name = query.getValueAt("name");
		try {
			HashVO[] schemevo = UIUtil.getHashVoArrayByDS(null,
					"select * from CK_SCHEME where name='" + name + "'");
			if (schemevo.length <= 0) {
				MessageBox.show(this, "请选择方案名称查询");
				return;
			}
			HashVO[] vschemevo = UIUtil.getHashVoArrayByDS(null,
					"select * from V_CK_SCHEME where schemeid='"
							+ schemevo[0].getStringValue("id") + "'");
			for (int i = 0; i < vschemevo.length; i++) {
				String deptname = ZZLUIUtil.getdeptsSplit(vschemevo[i]
						.getStringValue("deptid"));
				deptname = deptname.replace("。", "");
				cell.setValueAt(deptname, i + 2, 0);
				String planname = schemevo[0].getStringValue("planname");
				cell.setValueAt(planname, i + 2, 1);
				HashVO[] planvo = UIUtil.getHashVoArrayByDS(null,
						"select * from CK_PLAN where id='"
								+ schemevo[0].getStringValue("planid") + "'");
				String PLANBEGINDATE = null;
				String PLANENDDATE = null;
				if (planvo[0].getStringValue("PLANBEGINDATE") != null
						&& planvo[0].getStringValue("PLANENDDATE") != null) {
					PLANBEGINDATE = planvo[0].getStringValue("PLANBEGINDATE");
					PLANENDDATE = planvo[0].getStringValue("PLANENDDATE");
				}
				cell.setValueAt(PLANBEGINDATE + "至" + PLANENDDATE, i + 2, 2);
				HashVO[] workvo = UIUtil.getHashVoArrayByDS(null,
						"select * from CK_MEMBER_WORK where checkeddept like '%;"
								+ vschemevo[i].getStringValue("deptid")
								+ ";%' and schemeid='"
								+ schemevo[0].getStringValue("id") + "'");
				String countname = workvo[0].getStringValue("teamusers")
						.toString();
				countname = countname.substring(1, countname.length() - 1);
				String[] countname1 = countname.split(";");
				countname = String.valueOf(countname1.length + 1);
				cell.setValueAt(countname, i + 2, 3);
				String sql="select number from  ck_retrival where deptid='"
					+ vschemevo[i].getStringValue("deptid")
					+ "' and schemeid='"
					+ schemevo[0].getStringValue("id") + "'";
					if (UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查报表'") != null) {
						cell.setValueAt(UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查报表'") , i + 2, 8);
					}
					if (UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查账册登记簿'") != null) {
						cell.setValueAt(UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查账册登记簿'"), i + 2, 9);
					}
					if (UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查凭证'") != null) {
						cell.setValueAt(UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查凭证'"),
								i + 2, 10);
					}
					if (UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查信贷档案'") != null) {
						cell.setValueAt(UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查信贷档案'"), i + 2, 11);
					}
					if (UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查其他文件资料'") != null) {
						cell.setValueAt(UIUtil.getStringValueByDS(null, sql+" and Profilename='抽查其他文件资料'"),
								i + 2, 12);
					}
				HashVO[] record = UIUtil.getHashVoArrayByDS(null,
						"select * from  ck_record where deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id") + "'");
				if (record.length > 0) {
					if (record[0].getStringValue("confirmname") != null
							&& record[0].getStringValue("confirmname").equals(
									"Y")
							&& record[0].getStringValue("confirmname2") != null
							&& record[0].getStringValue("confirmname2").equals(
									"Y")) {
						cell.setValueAt("2", i + 2, 15);
					} else {
						cell.setValueAt("1", i + 2, 15);
					}
					if (record[0].getStringValue("abarbeitungname") != null
							&& record[0].getStringValue("abarbeitungname")
									.equals("Y")) {
						cell.setValueAt("1", i + 2, 17);
					}
				}
				HashVO[] wzgproblemInfo = UIUtil.getHashVoArrayByDS(null,
						"select * from ck_problem_info where  1=1  and trackresult='未整改' and deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id") + "'");
				HashVO[] yzgproblemInfo = UIUtil.getHashVoArrayByDS(null,
						"select * from ck_problem_info where  1=1  and trackresult='已整改' and deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id") + "'");
				HashVO[] bfzgproblemInfo = UIUtil.getHashVoArrayByDS(null,
						"select * from ck_problem_info where  1=1 and trackresult='部份整改' and deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id") + "'");
				String yzg = String.valueOf(yzgproblemInfo.length);
				String bfzg = String.valueOf(bfzgproblemInfo.length);
				String wzg = String.valueOf(wzgproblemInfo.length);
				cell.setValueAt(yzg, i + 2, 23);
				cell.setValueAt(bfzg, i + 2, 24);
				cell.setValueAt(wzg, i + 2, 25);
				HashVO[] zgzgzrr = UIUtil.getHashVoArrayByDS(null,
						"select * from ck_problem_info where  1=1  and deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id")
								+ "' and mainadjustuserid is not null");
				HashVO[] zgzzzrr = UIUtil.getHashVoArrayByDS(null,
						"select * from ck_problem_info where  1=1  and deptid='"
								+ vschemevo[i].getStringValue("deptid")
								+ "' and schemeid='"
								+ schemevo[0].getStringValue("id")
								+ "' and adjustuserid is not null");
				String zgzrr = String.valueOf(zgzgzrr.length);
				String zzzrr = String.valueOf(zgzzzrr.length);
				cell.setValueAt(zgzrr, i + 2, 31);
				cell.setValueAt(zzzrr, i + 2, 32);
				if (i == vschemevo.length - 1) {
					cell.setValueAt("合计", vschemevo.length + 2, 0);
					for (int c = 0; c < col - 3; c++) {
						int count = 0;
						for (int r = 0; r < vschemevo.length; r++) {
							String num = cell.getValueAt(r + 2, c + 3);
							if (num == null || num.equals("")
									|| num.equals(null) || num.equals("null")) {
								num = "0";
							}
							int countnum = Integer.parseInt(num);
							count = count + countnum;
							if (r == vschemevo.length - 1) {
								String strnum = String.valueOf(count);
								cell.setValueAt(strnum, r + 2 + 1, c + 3);
							}
							if (r == vschemevo.length - 1) {
								HashVO[] wl_record = UIUtil.getHashVoArrayByDS(
										null,
										"select * from ck_wl_record where schemeid='"
												+ schemevo[0]
														.getStringValue("id")
												+ "'");
								if (wl_record.length > 0) {
									if (wl_record[0].getStringValue("report") != null
											&& wl_record[0].getStringValue(
													"report").equals("Y")) {
										cell.setValueAt("1", r + 2 + 1, 16);
									}
									if (wl_record[0].getStringValue("risk") != null
											&& wl_record[0].getStringValue(
													"risk").equals("Y")) {
										cell.setValueAt("1", r + 2 + 1, 18);
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void stateChanged(ChangeEvent arg0) {
		// TODO Auto-generated method stub

	}

	public void onBillListHtmlHrefClicked(BillListHtmlHrefEvent arg0) {
		// TODO Auto-generated method stub

	}

	public void onBillListSelectChanged(BillListSelectionEvent arg0) {
		// TODO Auto-generated method stub

	}

}
